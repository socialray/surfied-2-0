<?php
if ( ! defined( 'myCRED_VERSION' ) ) exit;

/**
 * myCRED_Hooks_Module class
 * @since 0.1
 * @version 1.2.1
 */
if ( ! class_exists( 'myCRED_Hooks_Module' ) ) :
	class myCRED_Hooks_Module extends myCRED_Module {

		/**
		 * Construct
		 */
		function __construct( $type = 'mycred_default' ) {

			parent::__construct( 'myCRED_Hooks_Module', array(
				'module_name' => 'hooks',
				'option_id'   => 'mycred_pref_hooks',
				'defaults'    => array(
					'installed'   => array(),
					'active'      => array(),
					'hook_prefs'  => array()
				),
				'labels'      => array(
					'menu'        => __( 'Hooks', 'mycred' ),
					'page_title'  => __( 'Hooks', 'mycred' ),
					'page_header' => __( 'Hooks', 'mycred' )
				),
				'screen_id'   => 'myCRED_page_hooks',
				'accordion'   => true,
				'menu_pos'    => 20
			), $type );

		}

		/**
		 * Load Hooks
		 * @since 0.1
		 * @version 1.0
		 */
		public function module_init() {

			if ( ! empty( $this->installed ) ) {

				foreach ( $this->installed as $key => $gdata ) {

					if ( $this->is_active( $key ) && isset( $gdata['callback'] ) ) {
						$this->call( 'run', $gdata['callback'] );
					}

				}

			}

		}

		/**
		 * Call
		 * Either runs a given class method or function.
		 * @since 0.1
		 * @version 1.1
		 */
		public function call( $call, $callback, $return = NULL ) {

			// Class
			if ( is_array( $callback ) && class_exists( $callback[0] ) ) {

				$class = $callback[0];
				$methods = get_class_methods( $class );
				if ( in_array( $call, $methods ) ) {

					$new = new $class( ( isset( $this->hook_prefs ) ) ? $this->hook_prefs : array(), $this->mycred_type );
					return $new->$call( $return );

				}

			}

			// Function
			elseif ( ! is_array( $callback ) ) {

				if ( function_exists( $callback ) ) {

					if ( $return !== NULL )
						return call_user_func( $callback, $return, $this );
					else
						return call_user_func( $callback, $this );

				}

			}

		}

		/**
		 * Get Hooks
		 * @since 0.1
		 * @version 1.1.1
		 */
		public function get( $save = false ) {

			$installed = array();

			// Registrations
			$installed['registration'] = array(
				'title'        => __( '%plural% for registrations', 'mycred' ),
				'description'  => __( 'Award %_plural% for users joining your website.', 'mycred' ),
				'callback'     => array( 'myCRED_Hook_Registration' )
			);

			// Site Visits
			$installed['site_visit'] = array(
				'title'        => __( '%plural% for daily visits', 'mycred' ),
				'description'  => __( 'Award %_plural% for users visiting your website on a daily basis.', 'mycred' ),
				'callback'     => array( 'myCRED_Hook_Site_Visits' )
			);

			// View Content
			$installed['view_contents'] = array(
				'title'        => __( '%plural% for viewing content', 'mycred' ),
				'description'  => __( 'Award %_plural% to your users for viewing posts and / or %plural% to your authors for members viewing their content.', 'mycred' ),
				'callback'     => array( 'myCRED_Hook_View_Contents' )
			);

			// Logins
			$installed['logging_in'] = array(
				'title'       => __( '%plural% for logins', 'mycred' ),
				'description' => __( 'Award %_plural% for logging in to your website. You can also set an optional limit.', 'mycred' ),
				'callback'    => array( 'myCRED_Hook_Logging_In' )
			);

			// Content Publishing
			$installed['publishing_content'] = array(
				'title'       => __( '%plural% for publishing content', 'mycred' ),
				'description' => __( 'Award %_plural% for publishing content on your website. If your custom post type is not shown bellow, make sure it is set to "Public".', 'mycred' ),
				'callback'    => array( 'myCRED_Hook_Publishing_Content' )
			);

			// Commenting
			$installed['comments'] = array(
				'title'       => ( ! function_exists( 'dsq_is_installed' ) ) ? __( '%plural% for comments', 'mycred' ) : __( '%plural% for Disqus comments', 'mycred' ),
				'description' => __( 'Award %_plural% for making comments.', 'mycred' ),
				'callback'    => array( 'myCRED_Hook_Comments' )
			);

			// Link Clicks
			$installed['link_click'] = array(
				'title'       => __( '%plural% for clicking on links', 'mycred' ),
				'description' => __( 'Award %_plural% to users who clicks on links generated by the [mycred_link] shortcode.', 'mycred' ),
				'callback'    => array( 'myCRED_Hook_Click_Links' )
			);

			// Video Views
			$installed['video_view'] = array(
				'title'       => __( '%plural% for viewing Videos', 'mycred' ),
				'description' => __( 'Award %_plural% to users who watches videos embedded using the [mycred_video] shortcode.', 'mycred' ),
				'callback'    => array( 'myCRED_Hook_Video_Views' )
			);

			// Affiliation
			$installed['affiliate'] = array(
				'title'       => __( '%plural% for referrals', 'mycred' ),
				'description' => __( 'Award %_plural% to users who refer either visitors and/or new member signups.', 'mycred' ),
				'callback'    => array( 'myCRED_Hook_Affiliate' )
			);

			$installed = apply_filters( 'mycred_setup_hooks', $installed, $this->mycred_type );

			if ( $save === true && $this->core->can_edit_plugin() ) {
				$new_data = array(
					'active'     => $this->active,
					'installed'  => $installed,
					'hook_prefs' => $this->hook_prefs
				);
				mycred_update_option( $this->option_id, $new_data );
			}

			$this->installed = $installed;
			return $installed;

		}

		/**
		 * Admin Page
		 * @since 0.1
		 * @version 1.1
		 */
		public function admin_page() {

			// Security
			if ( ! $this->core->can_edit_creds() )
				wp_die( __( 'Access Denied', 'mycred' ) );

			// Get installed
			$installed = $this->get();
?>
<div class="wrap" id="myCRED-wrap">
	<h2><?php echo sprintf( __( '%s Hooks', 'mycred' ), mycred_label() ); ?></h2>

	<?php $this->update_notice(); ?>

	<p><?php echo $this->core->template_tags_general( __( 'Hooks are instances where %_plural% are awarded or deducted from a user, depending on their actions around your website.', 'mycred' ) ); ?></p>
	<form method="post" action="options.php" name="mycred-hooks-setup-form" novalidate>

		<?php settings_fields( $this->settings_name ); ?>

		<!-- Loop though Hooks -->
		<div class="list-items expandable-li" id="accordion">
<?php

			// If we have hooks
			if ( ! empty( $installed ) ) {

				// Loop though them
				foreach ( $installed as $key => $data ) {

?>
			<h4><div class="icon icon-<?php if ( $this->is_active( $key ) ) echo 'active'; else echo 'inactive'; echo ' ' . $key; ?>"></div><label><?php echo $this->core->template_tags_general( $data['title'] ); ?></label></h4>
			<div class="body" style="display:none;">
				<p><?php echo nl2br( $this->core->template_tags_general( $data['description'] ) ); ?></p>
				<label class="subheader"><?php _e( 'Enable', 'mycred' ); ?></label>
				<ol>
					<li>
						<input type="checkbox" name="<?php echo $this->option_id; ?>[active][]" id="mycred-hook-<?php echo $key; ?>" value="<?php echo $key; ?>"<?php if ( $this->is_active( $key ) ) echo ' checked="checked"'; ?> />
					</li>
				</ol>
				<?php echo $this->call( 'preferences', $data['callback'] ); ?>

			</div>
<?php

				}

			}

?>
		</div>

		<?php submit_button( __( 'Update Changes', 'mycred' ), 'primary large', 'submit', false ); ?>

	</form>
</div>
<script type="text/javascript">
jQuery(function($) {

	$( 'select.limit-toggle' ).change(function(){

		if ( $(this).find( ':selected' ).val() != 'x' )
			$(this).prev().attr( 'type', 'text' ).val( 0 );
		else
			$(this).prev().attr( 'type', 'hidden' ).val( 0 );

	});

});
</script>
<?php

		}

		/**
		 * Sanititze Settings
		 * @since 0.1
		 * @version 1.2
		 */
		public function sanitize_settings( $post ) {

			// Loop though all installed hooks
			$installed = $this->get();

			// Construct new settings
			$new_post['installed'] = $installed;
			if ( empty( $post['active'] ) || ! isset( $post['active'] ) )
				$post['active'] = array();

			$new_post['active'] = $post['active'];

			if ( ! empty( $installed ) ) {

				foreach ( $installed as $key => $data ) {

					if ( isset( $data['callback'] ) && isset( $post['hook_prefs'][ $key ] ) ) {

						// Old settings
						$old_settings = $post['hook_prefs'][ $key ];

						// New settings
						$new_settings = $this->call( 'sanitise_preferences', $data['callback'], $old_settings );

						// If something went wrong use the old settings
						if ( empty( $new_settings ) || $new_settings === NULL || ! is_array( $new_settings ) )
							$new_post['hook_prefs'][ $key ] = $old_settings;

						// Else we got ourselves new settings
						else
							$new_post['hook_prefs'][ $key ] = $new_settings;

						// Handle de-activation
						if ( ! isset( $this->active ) ) continue;

						if ( in_array( $key, (array) $this->active ) && ! in_array( $key, $new_post['active'] ) )
							$this->call( 'deactivate', $data['callback'], $new_post['hook_prefs'][ $key ] );

						// Next item

					}

				}

			}

			// 1.4 Update flag
			delete_option( 'mycred_update_req_hooks' );

			$installed = NULL;
			return $new_post;

		}

	}
endif;

/**
 * Hook for registrations
 * @since 0.1
 * @version 1.2
 */
if ( ! class_exists( 'myCRED_Hook_Registration' ) ) :
	class myCRED_Hook_Registration extends myCRED_Hook {

		/**
		 * Construct
		 */
		function __construct( $hook_prefs, $type = 'mycred_default' ) {

			parent::__construct( array(
				'id'       => 'registration',
				'defaults' => array(
					'creds'   => 10,
					'log'     => '%plural% for becoming a member'
				)
			), $hook_prefs, $type );

		}

		/**
		 * Run
		 * @since 0.1
		 * @version 1.2
		 */
		public function run() {

			if ( function_exists( 'buddypress' ) && apply_filters( 'bp_core_signup_send_activation_key', true ) )
				add_action( 'bp_core_activated_user', array( $this, 'verified_signup' ) );

			add_action( 'user_register', array( $this, 'registration' ) );

		}

		/**
		 * Signup Veification
		 * If BuddyPress signup verification is used, we award points first now.
		 * @since 1.5
		 * @version 1.0
		 */
		public function verified_signup( $user_id ) {

			$this->registration( $user_id );

		}

		/**
		 * Registration Hook
		 * @since 0.1
		 * @version 1.1
		 */
		public function registration( $user_id ) {

			// Make sure user is not excluded
			if ( $this->core->exclude_user( $user_id ) === true ) return;

			$data = array( 'ref_type' => 'user' );

			// Make sure this is unique
			if ( $this->core->has_entry( 'registration', $user_id, $user_id, $data, $this->mycred_type ) ) return;

			// Execute
			$this->core->add_creds(
				'registration',
				$user_id,
				$this->prefs['creds'],
				$this->prefs['log'],
				$user_id,
				$data,
				$this->mycred_type
			);

		}

		/**
		 * Preference for Registration Hook
		 * @since 0.1
		 * @version 1.0.1
		 */
		public function preferences() {

			$prefs = $this->prefs;

?>
<label class="subheader"><?php echo $this->core->plural(); ?></label>
<ol>
	<li>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( 'creds' ); ?>" id="<?php echo $this->field_id( 'creds' ); ?>" value="<?php echo $this->core->number( $prefs['creds'] ); ?>" size="8" /></div>
	</li>
</ol>
<label class="subheader"><?php _e( 'Log template', 'mycred' ); ?></label>
<ol>
	<li>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( 'log' ); ?>" id="<?php echo $this->field_id( 'log' ); ?>" value="<?php echo esc_attr( $prefs['log'] ); ?>" class="long" /></div>
		<span class="description"><?php echo $this->available_template_tags( array( 'general', 'user' ) ); ?></span>
	</li>
</ol>
<?php

		}

	}
endif;

/**
 * Hook for site visits
 * @since 1.5
 * @version 1.1
 */
if ( ! class_exists( 'myCRED_Hook_Site_Visits' ) ) :
	class myCRED_Hook_Site_Visits extends myCRED_Hook {

		/**
		 * Construct
		 */
		function __construct( $hook_prefs, $type = 'mycred_default' ) {

			parent::__construct( array(
				'id'       => 'site_visit',
				'defaults' => array(
					'creds'   => 1,
					'log'     => '%plural% for site visit'
				)
			), $hook_prefs, $type );

		}

		/**
		 * Run
		 * @since 1.5
		 * @version 1.0.2
		 */
		public function run() {

			// Make sure user is logged in. Also to prevent unneccery db queries we
			// check to make sure the user does not have the cookie.
			if ( is_user_logged_in() && ! isset( $_COOKIE['mycred_site_visit'] ) )
				add_action( 'wp_head', array( $this, 'site_visit' ) );

		}

		/**
		 * Visit Hook
		 * @since 1.5
		 * @version 1.1.2
		 */
		public function site_visit() {

			if ( defined( 'DOING_AJAX' ) && DOING_AJAX ) return;

			// Current User ID
			$user_id = get_current_user_id();

			// Set cookie to prevent db queries again today.
			$lifespan = (int) ( 24*3600 ) - ( date_i18n( 'H' ) * 3600 + date_i18n( 'i' ) * 60 + date_i18n( 's' ) );
			if ( ! headers_sent() ) setcookie( 'mycred_site_visit', 1, $lifespan, '/' );

			// Make sure user is not excluded
			if ( $this->core->exclude_user( $user_id ) ) return;

			// Store todays date as an integer
			$today = (int) apply_filters( 'mycred_site_visit_id', date_i18n( 'Ymd' ) );
			$data = '';

			// Make sure this is unique
			if ( $this->core->has_entry( 'site_visit', $today, $user_id, $data, $this->mycred_type ) ) return;

			// Execute
			$this->core->add_creds(
				'site_visit',
				$user_id,
				$this->prefs['creds'],
				$this->prefs['log'],
				$today,
				$data,
				$this->mycred_type
			);

		}

		/**
		 * Preference for Site Visit Hook
		 * @since 1.5
		 * @version 1.0
		 */
		public function preferences() {

			$prefs = $this->prefs;

?>
<label class="subheader"><?php echo $this->core->plural(); ?></label>
<ol>
	<li>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( 'creds' ); ?>" id="<?php echo $this->field_id( 'creds' ); ?>" value="<?php echo $this->core->number( $prefs['creds'] ); ?>" size="8" /></div>
	</li>
</ol>
<label class="subheader"><?php _e( 'Log template', 'mycred' ); ?></label>
<ol>
	<li>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( 'log' ); ?>" id="<?php echo $this->field_id( 'log' ); ?>" value="<?php echo esc_attr( $prefs['log'] ); ?>" class="long" /></div>
		<span class="description"><?php echo $this->available_template_tags( array( 'general' ) ); ?></span>
	</li>
</ol>
<?php

		}

	}
endif;

/**
 * Hook for viewing content
 * @since 1.5.1
 * @version 1.1
 */
if ( ! class_exists( 'myCRED_Hook_View_Contents' ) ) :
	class myCRED_Hook_View_Contents extends myCRED_Hook {

		/**
		 * Construct
		 */
		function __construct( $hook_prefs, $type = 'mycred_default' ) {

			$defaults = array(
				'post'    => array(
					'creds'   => 1,
					'log'     => '%plural% for viewing a post',
					'acreds'  => 1,
					'limit'   => '0/x',
					'alog'    => '%plural% for view of your post',
					'visitor' => 0,
					'alimit'  => '0/x'
				),
				'page'    => array(
					'creds'   => 1,
					'log'     => '%plural% for viewing a page',
					'acreds'  => 1,
					'limit'   => '0/x',
					'alog'    => '%plural% for view of your page',
					'visitor' => 0,
					'alimit'  => '0/x'
				)
			);

			if ( isset( $hook_prefs['view_contents'] ) )
				$defaults = $hook_prefs['view_contents'];

			parent::__construct( array(
				'id'       => 'view_contents',
				'defaults' => $defaults
			), $hook_prefs, $type );

		}

		/**
		 * Run
		 * @since 1.5.1
		 * @version 1.0
		 */
		public function run() {

			if ( is_user_logged_in() )
				add_filter( 'the_content', array( $this, 'content_loaded' ) );

		}

		/**
		 * Content Loaded
		 * @since 1.5.1
		 * @version 1.1.2
		 */
		public function content_loaded( $content ) {

			// Only applicable on single post type view
			if ( ! is_singular() || ( defined( 'DOING_AJAX' ) && DOING_AJAX ) || is_admin() ) return $content;

			global $post;

			$user_id    = get_current_user_id();
			$pay_author = true;
			if ( $post->post_author == $user_id ) return $content;

			// Make sure this post type award points. Any amount but zero.
			if ( isset( $this->prefs[ $post->post_type ]['creds'] ) && $this->prefs[ $post->post_type ]['creds'] != 0 && apply_filters( 'mycred_view_content', true, $this ) === true ) {

				// No payout for viewing our own content
				if ( ! $this->core->exclude_user( $user_id ) ) {

					// Limit
					if ( ! $this->over_hook_limit( $post->post_type, 'view_content', $user_id, $post->ID ) ) {

						$this->core->add_creds(
							'view_content',
							$user_id,
							$this->prefs[ $post->post_type ]['creds'],
							$this->prefs[ $post->post_type ]['log'],
							$post->ID,
							array( 'ref_type' => 'post' ),
							$this->mycred_type
						);

					}

					// If the visitor does not get points, neither does the author
					else $pay_author = false;

				}

			}

			// Make sure this post type award points to the author. Any amount but zero.
			if ( isset( $this->prefs[ $post->post_type ]['acreds'] ) && $this->prefs[ $post->post_type ]['acreds'] != 0 && apply_filters( 'mycred_view_content_author', $pay_author, $this ) === true ) {

				// No payout for viewing our own content
				if ( ! $this->core->exclude_user( $post->post_author ) ) {

					// Limit
					if ( ! $this->over_hook_limit( $post->post_type, 'view_content_author', $post->post_author ) )
						$this->core->add_creds(
							'view_content_author',
							$post->post_author,
							$this->prefs[ $post->post_type ]['acreds'],
							$this->prefs[ $post->post_type ]['alog'],
							$post->ID,
							array( 'ref_type' => 'post', 'cui' => $user_id ),
							$this->mycred_type
						);

				}

			}

			return $content;

		}

		/**
		 * Preference for read content hook
		 * @since 1.5.1
		 * @version 1.0.1
		 */
		public function preferences() {

			$prefs = $this->prefs;

?>
<label class="subheader"><?php echo $this->core->template_tags_general( __( '%plural% for viewing Posts', 'mycred' ) ); ?></label>
<ol class="inline">
	<li style="min-width: 200px;">
		<label for="<?php echo $this->field_id( array( 'post' => 'creds' ) ); ?>"><?php _e( 'Member', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'post' => 'creds' ) ); ?>" id="<?php echo $this->field_id( array( 'post' => 'creds' ) ); ?>" value="<?php echo $this->core->number( $prefs['post']['creds'] ); ?>" size="8" /></div>

		<label for="<?php echo $this->field_id( array( 'post', 'limit' ) ); ?>"><?php _e( 'Limit', 'mycred' ); ?></label>
		<?php echo $this->hook_limit_setting( $this->field_name( array( 'post', 'limit' ) ), $this->field_id( array( 'post', 'limit' ) ), $prefs['post']['limit'] ); ?>
	</li>
	<li>
		<label for="<?php echo $this->field_id( array( 'post' => 'acreds' ) ); ?>"><?php _e( 'Content Author', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'post' => 'acreds' ) ); ?>" id="<?php echo $this->field_id( array( 'post' => 'acreds' ) ); ?>" value="<?php echo $this->core->number( $prefs['post']['acreds'] ); ?>" size="8" /></div>

		<label for="<?php echo $this->field_id( array( 'post', 'alimit' ) ); ?>"><?php _e( 'Limit', 'mycred' ); ?></label>
		<?php echo $this->hook_limit_setting( $this->field_name( array( 'post', 'alimit' ) ), $this->field_id( array( 'post', 'alimit' ) ), $prefs['post']['alimit'] ); ?>
	</li>
</ol>
<label class="subheader"><?php _e( 'Log template', 'mycred' ); ?></label>
<ol>
	<li>
		<label for="<?php echo $this->field_id( array( 'post' => 'log' ) ); ?>"><?php _e( 'Member', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'post' => 'log' ) ); ?>" id="<?php echo $this->field_id( array( 'post' => 'log' ) ); ?>" value="<?php echo esc_attr( $prefs['post']['log'] ); ?>" class="long" /></div>
		<span class="description"><?php echo $this->available_template_tags( array( 'general', 'post' ) ); ?></span>
	</li>
	<li class="empty">&nbsp;</li>
	<li>
		<label for="<?php echo $this->field_id( array( 'post' => 'alog' ) ); ?>"><?php _e( 'Content Author', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'post' => 'alog' ) ); ?>" id="<?php echo $this->field_id( array( 'post' => 'alog' ) ); ?>" value="<?php echo esc_attr( $prefs['post']['alog'] ); ?>" class="long" /></div>
		<span class="description"><?php echo $this->available_template_tags( array( 'general', 'post' ) ); ?></span>
	</li>
</ol>
<label class="subheader"><?php echo $this->core->template_tags_general( __( '%plural% for viewing Pages', 'mycred' ) ); ?></label>
<ol class="inline">
	<li style="min-width: 200px;">
		<label for="<?php echo $this->field_id( array( 'page' => 'creds' ) ); ?>"><?php _e( 'Member', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'page' => 'creds' ) ); ?>" id="<?php echo $this->field_id( array( 'page' => 'creds' ) ); ?>" value="<?php echo $this->core->number( $prefs['page']['creds'] ); ?>" size="8" /></div>

		<label for="<?php echo $this->field_id( array( 'page', 'limit' ) ); ?>"><?php _e( 'Limit', 'mycred' ); ?></label>
		<?php echo $this->hook_limit_setting( $this->field_name( array( 'page', 'limit' ) ), $this->field_id( array( 'page', 'limit' ) ), $prefs['page']['limit'] ); ?>
	</li>
	<li>
		<label for="<?php echo $this->field_id( array( 'page' => 'acreds' ) ); ?>"><?php _e( 'Content Author', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'page' => 'acreds' ) ); ?>" id="<?php echo $this->field_id( array( 'page' => 'acreds' ) ); ?>" value="<?php echo $this->core->number( $prefs['page']['acreds'] ); ?>" size="8" /></div>

		<label for="<?php echo $this->field_id( array( 'page', 'alimit' ) ); ?>"><?php _e( 'Limit', 'mycred' ); ?></label>
		<?php echo $this->hook_limit_setting( $this->field_name( array( 'page', 'alimit' ) ), $this->field_id( array( 'page', 'alimit' ) ), $prefs['page']['alimit'] ); ?>
	</li>
</ol>
<label class="subheader"><?php _e( 'Log template', 'mycred' ); ?></label>
<ol>
	<li>
		<label for="<?php echo $this->field_id( array( 'page' => 'log' ) ); ?>"><?php _e( 'Member', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'page' => 'log' ) ); ?>" id="<?php echo $this->field_id( array( 'page' => 'log' ) ); ?>" value="<?php echo esc_attr( $prefs['page']['log'] ); ?>" class="long" /></div>
		<span class="description"><?php echo $this->available_template_tags( array( 'general', 'post' ) ); ?></span>
	</li>
	<li class="empty">&nbsp;</li>
	<li>
		<label for="<?php echo $this->field_id( array( 'page' => 'alog' ) ); ?>"><?php _e( 'Content Author', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'page' => 'alog' ) ); ?>" id="<?php echo $this->field_id( array( 'page' => 'alog' ) ); ?>" value="<?php echo esc_attr( $prefs['page']['alog'] ); ?>" class="long" /></div>
		<span class="description"><?php echo $this->available_template_tags( array( 'general', 'post' ) ); ?></span>
	</li>
</ol>
<?php

			// Get all not built-in post types (excludes posts, pages, media)
			$post_type_args = array(
				'public'   => true,
				'_builtin' => false
			);
			$post_types = get_post_types( $post_type_args, 'objects', 'and' ); 

			foreach ( $post_types as $post_type ) {

				// Points to award/deduct
				if ( isset( $prefs[ $post_type->name ]['creds'] ) )
					$_creds = $prefs[ $post_type->name ]['creds'];
				else
					$_creds = 0;

				if ( isset( $prefs[ $post_type->name ]['limit'] ) )
					$limit = $prefs[ $post_type->name ]['limit'];
				else
					$limit = '0/x';

				// Log template
				if ( isset( $prefs[ $post_type->name ]['log'] ) )
					$_log = $prefs[ $post_type->name ]['log'];
				else
					$_log = '%plural% for viewing ' . $post_type->labels->name;

				// Points to award/deduct
				if ( isset( $prefs[ $post_type->name ]['acreds'] ) )
					$_acreds = $prefs[ $post_type->name ]['acreds'];
				else
					$_acreds = 0;

				if ( isset( $prefs[ $post_type->name ]['alimit'] ) )
					$alimit = $prefs[ $post_type->name ]['alimit'];
				else
					$alimit = '0/x';

				// Log template
				if ( isset( $prefs[ $post_type->name ]['alog'] ) )
					$_alog = $prefs[ $post_type->name ]['alog'];
				else
					$_alog = '%plural% for view of your ' . $post_type->labels->name;

?>
<label class="subheader"><?php echo sprintf( $this->core->template_tags_general( __( '%plural% for viewing %s', 'mycred' ) ),  $post_type->labels->name ); ?></label>
<ol class="inline">
	<li style="min-width: 200px;">
		<label for="<?php echo $this->field_id( array( $post_type->name => 'creds' ) ); ?>"><?php _e( 'Member', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( $post_type->name => 'creds' ) ); ?>" id="<?php echo $this->field_id( array( $post_type->name => 'creds' ) ); ?>" value="<?php echo $this->core->number( $_creds ); ?>" size="8" /></div>

		<label for="<?php echo $this->field_id( array( $post_type->name, 'limit' ) ); ?>"><?php _e( 'Limit', 'mycred' ); ?></label>
		<?php echo $this->hook_limit_setting( $this->field_name( array( $post_type->name, 'limit' ) ), $this->field_id( array( $post_type->name, 'limit' ) ), $limit ); ?>
	</li>
	<li>
		<label for="<?php echo $this->field_id( array( $post_type->name => 'acreds' ) ); ?>"><?php _e( 'Content Author', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( $post_type->name => 'acreds' ) ); ?>" id="<?php echo $this->field_id( array( $post_type->name => 'acreds' ) ); ?>" value="<?php echo $this->core->number( $_acreds ); ?>" size="8" /></div>

		<label for="<?php echo $this->field_id( array( $post_type->name, 'alimit' ) ); ?>"><?php _e( 'Limit', 'mycred' ); ?></label>
		<?php echo $this->hook_limit_setting( $this->field_name( array( $post_type->name, 'alimit' ) ), $this->field_id( array( $post_type->name, 'alimit' ) ), $alimit ); ?>
	</li>
</ol>
<label class="subheader"><?php _e( 'Log template', 'mycred' ); ?></label>
<ol>
	<li>
		<label for="<?php echo $this->field_id( array( $post_type->name => 'log' ) ); ?>"><?php _e( 'Member', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( $post_type->name => 'log' ) ); ?>" id="<?php echo $this->field_id( array( $post_type->name => 'log' ) ); ?>" value="<?php echo esc_attr( $_log ); ?>" class="long" /></div>
		<span class="description"><?php echo $this->available_template_tags( array( 'general', 'post' ) ); ?></span>
	</li>
	<li class="empty">&nbsp;</li>
	<li>
		<label for="<?php echo $this->field_id( array( $post_type->name => 'alog' ) ); ?>"><?php _e( 'Content Author', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( $post_type->name => 'alog' ) ); ?>" id="<?php echo $this->field_id( array( $post_type->name => 'alog' ) ); ?>" value="<?php echo esc_attr( $_alog ); ?>" class="long" /></div>
		<span class="description"><?php echo $this->available_template_tags( array( 'general', 'post' ) ); ?></span>
	</li>
</ol>
<?php

			}

		}

		/**
		 * Sanitise Preferences
		 * @since 1.6
		 * @version 1.0.1
		 */
		function sanitise_preferences( $data ) {

			if ( isset( $data['post']['limit'] ) && isset( $data['post']['limit_by'] ) ) {
				$limit = sanitize_text_field( $data['post']['limit'] );
				if ( $limit == '' ) $limit = 0;
				$data['post']['limit'] = $limit . '/' . $data['post']['limit_by'];
				unset( $data['post']['limit_by'] );
			}

			if ( isset( $data['post']['alimit'] ) && isset( $data['post']['alimit_by'] ) ) {
				$limit = sanitize_text_field( $data['post']['alimit'] );
				if ( $limit == '' ) $limit = 0;
				$data['post']['alimit'] = $limit . '/' . $data['post']['alimit_by'];
				unset( $data['post']['alimit_by'] );
			}

			if ( isset( $data['page']['limit'] ) && isset( $data['page']['limit_by'] ) ) {
				$limit = sanitize_text_field( $data['page']['limit'] );
				if ( $limit == '' ) $limit = 0;
				$data['page']['limit'] = $limit . '/' . $data['page']['limit_by'];
				unset( $data['page']['limit_by'] );
			}

			if ( isset( $data['page']['alimit'] ) && isset( $data['page']['alimit_by'] ) ) {
				$limit = sanitize_text_field( $data['page']['alimit'] );
				if ( $limit == '' ) $limit = 0;
				$data['page']['alimit'] = $limit . '/' . $data['page']['alimit_by'];
				unset( $data['page']['alimit_by'] );
			}

			$post_type_args = array(
				'public'   => true,
				'_builtin' => false
			);
			$post_types = get_post_types( $post_type_args, 'objects', 'and' ); 

			foreach ( $post_types as $post_type ) {

				if ( isset( $data[ $post_type->name ]['limit'] ) && isset( $data[ $post_type->name ]['limit_by'] ) ) {
					$limit = sanitize_text_field( $data[ $post_type->name ]['limit'] );
					if ( $limit == '' ) $limit = 0;
					$data[ $post_type->name ]['limit'] = $limit . '/' . $data[ $post_type->name ]['limit_by'];
					unset( $data[ $post_type->name ]['limit_by'] );
				}

				if ( isset( $data[ $post_type->name ]['alimit'] ) && isset( $data[ $post_type->name ]['alimit_by'] ) ) {
					$limit = sanitize_text_field( $data[ $post_type->name ]['alimit'] );
					if ( $limit == '' ) $limit = 0;
					$data[ $post_type->name ]['alimit'] = $limit . '/' . $data[ $post_type->name ]['alimit_by'];
					unset( $data[ $post_type->name ]['alimit_by'] );
				}

			}

			return $data;

		}

	}
endif;

/**
 * Hook for loggins
 * @since 0.1
 * @version 1.1
 */
if ( ! class_exists( 'myCRED_Hook_Logging_In' ) ) :
	class myCRED_Hook_Logging_In extends myCRED_Hook {

		/**
		 * Construct
		 */
		function __construct( $hook_prefs, $type = 'mycred_default' ) {

			parent::__construct( array(
				'id'       => 'logging_in',
				'defaults' => array(
					'creds'   => 1,
					'log'     => '%plural% for logging in',
					'limit'   => '1/d'
				)
			), $hook_prefs, $type );

		}

		/**
		 * Run
		 * @since 0.1
		 * @version 1.1
		 */
		public function run() {

			// Social Connect
			if ( function_exists( 'sc_social_connect_process_login' ) )
				add_action( 'social_connect_login', array( $this, 'social_login' ) );

			// WordPress
			add_action( 'wp_login', array( $this, 'logging_in' ), 10, 2 );

		}

		/**
		 * Social Login
		 * Adds support for Social Connect plugin
		 * @since 1.4
		 * @version 1.1
		 */
		public function social_login( $user_login = 0 ) {

			// Get user
			$user = get_user_by( 'login', $user_login );
			if ( ! isset( $user->ID ) ) {
				// In case we use emails for login instead of username
				$user = get_user_by( 'email', $user_login );
				if ( ! is_object( $user ) ) return;
			}

			// Check for exclusion
			if ( $this->core->exclude_user( $user->ID ) === true ) return;

			// Limit
			if ( ! $this->over_hook_limit( '', 'logging_in', $user->ID ) )
				$this->core->add_creds(
					'logging_in',
					$user->ID,
					$this->prefs['creds'],
					$this->prefs['log'],
					0,
					'',
					$this->mycred_type
				);

		}

		/**
		 * Login Hook
		 * @since 0.1
		 * @version 1.3
		 */
		public function logging_in( $user_login, $user = '' ) {

			// In case the user object is not past along
			if ( ! is_object( $user ) ) {

				$user = get_user_by( 'login', $user_login );
				if ( ! is_object( $user ) ) {

					// In case we use emails for login instead of username
					$user = get_user_by( 'email', $user_login );
					if ( ! is_object( $user ) ) return;

				}

			}

			// Check for exclusion
			if ( $this->core->exclude_user( $user->ID ) ) return;

			// Limit
			if ( ! $this->over_hook_limit( '', 'logging_in', $user->ID ) )
				$this->core->add_creds(
					'logging_in',
					$user->ID,
					$this->prefs['creds'],
					$this->prefs['log'],
					0,
					'',
					$this->mycred_type
				);

		}

		/**
		 * Preference for Login Hook
		 * @since 0.1
		 * @version 1.1
		 */
		public function preferences() {

			$prefs = $this->prefs;

?>
<label class="subheader"><?php echo $this->core->plural(); ?></label>
<ol>
	<li>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( 'creds' ); ?>" id="<?php echo $this->field_id( 'creds' ); ?>" value="<?php echo $this->core->number( $prefs['creds'] ); ?>" size="8" /></div>
	</li>
</ol>
<label class="subheader"><?php _e( 'Log Template', 'mycred' ); ?></label>
<ol>
	<li>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( 'log' ); ?>" id="<?php echo $this->field_id( 'log' ); ?>" value="<?php echo esc_attr( $prefs['log'] ); ?>" class="long" /></div>
		<span class="description"><?php echo $this->available_template_tags( array( 'general' ) ); ?></span>
	</li>
</ol>
<label class="subheader"><?php _e( 'Limit', 'mycred' ); ?></label>
<ol>
	<li>
		<?php echo $this->hook_limit_setting( $this->field_name( 'limit' ), $this->field_id( 'limit' ), $prefs['limit'] ); ?>
	</li>
</ol>
<?php

		}

		/**
		 * Sanitise Preferences
		 * @since 1.6
		 * @version 1.0
		 */
		function sanitise_preferences( $data ) {

			if ( isset( $data['limit'] ) && isset( $data['limit_by'] ) ) {
				$limit = sanitize_text_field( $data['limit'] );
				if ( $limit == '' ) $limit = 0;
				$data['limit'] = $limit . '/' . $data['limit_by'];
				unset( $data['limit_by'] );
			}

			return $data;

		}

	}
endif;

/**
 * Hook for publishing content
 * @since 0.1
 * @version 1.2
 */
if ( ! class_exists( 'myCRED_Hook_Publishing_Content' ) ) :
	class myCRED_Hook_Publishing_Content extends myCRED_Hook {

		/**
		 * Construct
		 */
		function __construct( $hook_prefs, $type = 'mycred_default' ) {

			$defaults = array(
				'post'    => array(
					'creds'  => 1,
					'log'    => '%plural% for new Post',
					'limit'  => '0/x'
				),
				'page'    => array(
					'creds'  => 1,
					'log'    => '%plural% for new Page',
					'limit'  => '0/x'
				)
			);

			if ( isset( $hook_prefs['publishing_content'] ) )
				$defaults = $hook_prefs['publishing_content'];

			parent::__construct( array(
				'id'       => 'publishing_content',
				'defaults' => $defaults
			), $hook_prefs, $type );

		}

		/**
		 * Run
		 * @since 0.1
		 * @version 1.0
		 */
		public function run() {

			add_action( 'transition_post_status', array( $this, 'publishing_content' ), 10, 3 );

		}

		/**
		 * Publish Content Hook
		 * @since 0.1
		 * @version 1.1.1
		 */
		public function publishing_content( $new_status, $old_status, $post ) {

			$user_id = $post->post_author;

			// Check for exclusions
			if ( $this->core->exclude_user( $user_id ) === true ) return;

			$post_id = $post->ID;
			$post_type = $post->post_type;

			// Make sure we award points other then zero
			if ( ! isset( $this->prefs[ $post_type ]['creds'] ) ) return;
			if ( empty( $this->prefs[ $post_type ]['creds'] ) || $this->prefs[ $post_type ]['creds'] == 0 ) return;

			// We want to fire when content get published or when it gets privatly published
			$status = apply_filters( 'mycred_publish_hook_old', array( 'new', 'auto-draft', 'draft', 'private', 'pending', 'future' ) );
			$publish_status = apply_filters( 'mycred_publish_hook_new', array( 'publish', 'private' ) );

			if ( in_array( $old_status, $status ) && in_array( $new_status, $publish_status ) && array_key_exists( $post_type, $this->prefs ) ) {

				// Prep
				$entry = $this->prefs[ $post_type ]['log'];
				$data = array( 'ref_type' => 'post' );

				// Make sure this is unique
				if ( $this->core->has_entry( 'publishing_content', $post_id, $user_id, $data, $this->mycred_type ) ) return;

				// Check limit
				if ( ! $this->over_hook_limit( $post_type, 'publishing_content', $user_id ) )
					$this->core->add_creds(
						'publishing_content',
						$user_id,
						$this->prefs[ $post_type ]['creds'],
						$entry,
						$post_id,
						$data,
						$this->mycred_type
					);

			}

		}

		/**
		 * Preference for Publish Content Hook
		 * @since 0.1
		 * @version 1.1
		 */
		public function preferences() {

			$prefs = $this->prefs;

?>
<label class="subheader"><?php echo $this->core->template_tags_general( __( '%plural% for Posts', 'mycred' ) ); ?></label>
<ol>
	<li>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'post' => 'creds' ) ); ?>" id="<?php echo $this->field_id( array( 'post' => 'creds' ) ); ?>" value="<?php echo $this->core->number( $prefs['post']['creds'] ); ?>" size="8" /></div>
	</li>
	<li>
		<label for="<?php echo $this->field_id( array( 'post' => 'limit' ) ); ?>"><?php _e( 'Limit', 'mycred' ); ?></label>
		<?php echo $this->hook_limit_setting( $this->field_name( array( 'post' => 'limit' ) ), $this->field_id( array( 'post' => 'limit' ) ), $prefs['post']['limit'] ); ?>
	</li>
</ol>
<label class="subheader"><?php _e( 'Log template', 'mycred' ); ?></label>
<ol>
	<li>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'post' => 'log' ) ); ?>" id="<?php echo $this->field_id( array( 'post' => 'log' ) ); ?>" value="<?php echo esc_attr( $prefs['post']['log'] ); ?>" class="long" /></div>
		<span class="description"><?php echo $this->available_template_tags( array( 'general', 'post' ) ); ?></span>
	</li>
</ol>
<label class="subheader"><?php echo $this->core->template_tags_general( __( '%plural% for Pages', 'mycred' ) ); ?></label>
<ol>
	<li>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'page' => 'creds' ) ); ?>" id="<?php echo $this->field_id( array( 'page' => 'creds' ) ); ?>" value="<?php echo $this->core->number( $prefs['page']['creds'] ); ?>" size="8" /></div>
	</li>
	<li>
		<label for="<?php echo $this->field_id( array( 'page' => 'limit' ) ); ?>"><?php _e( 'Limit', 'mycred' ); ?></label>
		<?php echo $this->hook_limit_setting( $this->field_name( array( 'page' => 'limit' ) ), $this->field_id( array( 'page' => 'limit' ) ), $prefs['page']['limit'] ); ?>
	</li>
</ol>
<label class="subheader"><?php _e( 'Log template', 'mycred' ); ?></label>
<ol>
	<li>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'page' => 'log' ) ); ?>" id="<?php echo $this->field_id( array( 'page' => 'log' ) ); ?>" value="<?php echo esc_attr( $prefs['page']['log'] ); ?>" class="long" /></div>
		<span class="description"><?php echo $this->available_template_tags( array( 'general', 'post' ) ); ?></span>
	</li>
</ol>
<?php

			// Get all not built-in post types (excludes posts, pages, media)
			$post_type_args = array(
				'public'   => true,
				'_builtin' => false
			);
			$post_types = get_post_types( $post_type_args, 'objects', 'and' ); 

			foreach ( $post_types as $post_type ) {

				// Start by checking if this post type should be excluded
				if ( ! $this->include_post_type( $post_type->name ) ) continue;

				// Points to award/deduct
				if ( isset( $prefs[ $post_type->name ]['creds'] ) )
					$_creds = $prefs[ $post_type->name ]['creds'];
				else
					$_creds = 0;

				// Log template
				if ( isset( $prefs[ $post_type->name ]['log'] ) )
					$_log = $prefs[ $post_type->name ]['log'];
				else
					$_log = '';

				if ( isset( $prefs[ $post_type->name ]['limit'] ) )
					$_limit = $prefs[ $post_type->name ]['limit'];
				else
					$_limit = '0/x';

?>
<label class="subheader"><?php echo sprintf( $this->core->template_tags_general( __( '%plural% for %s', 'mycred' ) ),  $post_type->labels->name ); ?></label>
<ol>
	<li>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( $post_type->name => 'creds' ) ); ?>" id="<?php echo $this->field_id( array( $post_type->name => 'creds' ) ); ?>" value="<?php echo $this->core->number( $_creds ); ?>" size="8" /></div>
	</li>
	<li>
		<label for="<?php echo $this->field_id( array( $post_type->name => 'limit' ) ); ?>"><?php _e( 'Limit', 'mycred' ); ?></label>
		<?php echo $this->hook_limit_setting( $this->field_name( array( $post_type->name => 'limit' ) ), $this->field_id( array( $post_type->name => 'limit' ) ), $_limit ); ?>
	</li>
</ol>
<label class="subheader"><?php _e( 'Log template', 'mycred' ); ?></label>
<ol>
	<li>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( $post_type->name => 'log' ) ); ?>" id="<?php echo $this->field_id( array( $post_type->name => 'log' ) ); ?>" value="<?php echo esc_attr( $_log ); ?>" class="long" /></div>
		<span class="description"><?php echo $this->available_template_tags( array( 'general', 'post' ) ); ?></span>
	</li>
</ol>
<?php

			}

		}

		/**
		 * Include Post Type
		 * Checks if a given post type should be excluded
		 * @since 0.1
		 * @version 1.1
		 */
		protected function include_post_type( $post_type ) {

			// Exclude Core
			$excludes = array( 'post', 'page' );
			if ( in_array( $post_type, apply_filters( 'mycred_post_type_excludes', $excludes ) ) ) return false;

			return true;

		}

		/**
		 * Sanitise Preferences
		 * @since 1.6
		 * @version 1.0
		 */
		function sanitise_preferences( $data ) {

			if ( isset( $data['post']['limit'] ) && isset( $data['post']['limit_by'] ) ) {
				$limit = sanitize_text_field( $data['post']['limit'] );
				if ( $limit == '' ) $limit = 0;
				$data['post']['limit'] = $limit . '/' . $data['post']['limit_by'];
				unset( $data['post']['limit_by'] );
			}

			if ( isset( $data['page']['limit'] ) && isset( $data['page']['limit_by'] ) ) {
				$limit = sanitize_text_field( $data['page']['limit'] );
				if ( $limit == '' ) $limit = 0;
				$data['page']['limit'] = $limit . '/' . $data['page']['limit_by'];
				unset( $data['page']['limit_by'] );
			}

			// Get all not built-in post types (excludes posts, pages, media)
			$post_type_args = array(
				'public'   => true,
				'_builtin' => false
			);
			$post_types = get_post_types( $post_type_args, 'objects', 'and' ); 

			foreach ( $post_types as $post_type ) {

				// Start by checking if this post type should be excluded
				if ( ! $this->include_post_type( $post_type->name ) ) continue;

				if ( isset( $data[ $post_type->name ]['limit'] ) && isset( $data[ $post_type->name ]['limit_by'] ) ) {
					$limit = sanitize_text_field( $data[ $post_type->name ]['limit'] );
					if ( $limit == '' ) $limit = 0;
					$data[ $post_type->name ]['limit'] = $limit . '/' . $data[ $post_type->name ]['limit_by'];
					unset( $data[ $post_type->name ]['limit_by'] );
				}

			}

			return $data;

		}

	}
endif;

/**
 * Hook for comments
 * @since 0.1
 * @version 1.3
 */
if ( ! class_exists( 'myCRED_Hook_Comments' ) ) :
	class myCRED_Hook_Comments extends myCRED_Hook {

		/**
		 * Construct
		 */
		function __construct( $hook_prefs, $type = 'mycred_default' ) {

			parent::__construct( array(
				'id'       => 'comments',
				'defaults' => array(
					'limits'   => array(
						'self_reply' => 0,
						'per_post'   => 10,
						'per_day'    => 0
					),
					'approved' => array(
						'creds'   => 1,
						'log'     => '%plural% for Approved Comment',
						'author'  => 0
					),
					'spam'     => array(
						'creds'   => '-5',
						'log'     => '%plural% deduction for Comment marked as SPAM',
						'author'  => 0
					),
					'trash'    => array(
						'creds'   => '-1',
						'log'     => '%plural% deduction for deleted / unapproved Comment',
						'author'  => 0
					)
				)
			), $hook_prefs, $type );

		}

		/**
		 * Run
		 * @since 0.1
		 * @version 1.2
		 */
		public function run() {

			if ( ! function_exists( 'dsq_is_installed' ) ) {
				add_action( 'comment_post',              array( $this, 'new_comment' ), 99, 2 );
				add_action( 'transition_comment_status', array( $this, 'comment_transitions' ), 99, 3 );
			}
			else {
				add_action( 'wp_insert_comment',         array( $this, 'disqus' ), 99, 2 );
			}

		}

		/**
		 * New Comment
		 * If comments are approved without moderation, we apply the corresponding method
		 * or else we will wait till the appropriate instance.
		 * @since 0.1
		 * @version 1.2.1
		 */
		public function new_comment( $comment_id, $comment_status ) {

			// Marked SPAM
			if ( $comment_status == 'spam' )
				$this->comment_transitions( 'spam', 'unapproved', $comment_id );

			// Approved comment
			elseif ( $comment_status == 1 )
				$this->comment_transitions( 'approved', 'unapproved', $comment_id );

		}

		/**
		 * Discuss Support
		 * @since 1.4
		 * @version 1.0
		 */
		function disqus( $id, $comment ) {

			// Attempt to get a comment authors ID
			if ( $comment->user_id == 0 ) {

				$email = get_user_by( 'email', $comment->comment_author_email );
				// Failed to find author, can not award points
				if ( $email === false ) return;
				$comment->user_id = $email->ID;

			}

			$new_status = 'spam';
			if ( $comment->comment_approved == 1 )
				$new_status = 'approved';

			elseif ( $comment->comment_approved == 0 )
				$new_status = 'unapproved';

			$this->comment_transitions( $new_status, 'unapproved', $comment );

		}

		/**
		 * Comment Transitions
		 * @since 1.1.2
		 * @version 1.5
		 */
		public function comment_transitions( $new_status, $old_status, $comment ) {

			// Passing an integer instead of an object means we need to grab the comment object ourselves
			if ( ! is_object( $comment ) )
				$comment = get_comment( $comment );

			// No comment object so lets bail
			if ( $comment === NULL ) return;

			// Ignore Pingbacks or Trackbacks
			if ( $comment->comment_type != '' ) return;

			// Logged out users miss out
			if ( $comment->user_id == 0 ) return;

			if ( apply_filters( 'mycred_comment_gets_cred', true, $comment, $new_status, $old_status ) === false ) return;

			// Get comment author
			$comment_author = $comment->user_id;

			// Get content author
			$content_author = NULL;
			if ( isset( $comment->comment_post_ID ) || $comment->comment_post_ID != '' ) {
				$post = get_post( (int) $comment->comment_post_ID );
				$content_author = $post->post_author;
			}

			$comment_author_points = $this->core->zero();
			$content_author_points = $this->core->zero();

			$reference = '';
			$log = '';

			// Approved Comments
			if ( $new_status == 'approved' ) {
				$reference = 'approved_comment';
				$log = $this->prefs['approved']['log'];

				// From unapproved / hold
				if ( in_array( $old_status, array( 'unapproved', 'hold' ) ) ) {
					// Comment author
					if ( ! $this->user_exceeds_limit( $comment_author, $comment->comment_post_ID ) )
						$comment_author_points = $this->prefs['approved']['creds'];

					// Content author
					$content_author_points = $this->prefs['approved']['author'];
				}

				// From being marked as spam
				elseif ( $old_status == 'spam' ) {
					$comment_author_points = abs( $this->prefs['spam']['creds'] );
					$content_author_points = abs( $this->prefs['spam']['author'] );
				}

				// From being in trash
				elseif ( $old_status == 'trash' ) {
					$comment_author_points = abs( $this->prefs['trash']['creds'] );
					$content_author_points = abs( $this->prefs['trash']['author'] );
				}
			}

			// Unapproved Comments
			elseif ( $new_status == 'unapproved' && $old_status == 'approved' ) {
				$reference = 'unapproved_comment';
				$log = $this->prefs['trash']['log'];

				// If we deducted points for approved comments we want to add them back
				if ( $this->prefs['approved']['creds'] < $this->core->zero() ) {
					$comment_author_points = abs( $this->prefs['approved']['creds'] );
					$content_author_points = abs( $this->prefs['approved']['author'] );
				}

				// Else use what we have set
				else {
					$comment_author_points = $this->prefs['trash']['creds'];
					$content_author_points = $this->prefs['trash']['author'];
				}
			}

			// Marked as SPAM
			elseif ( $new_status == 'spam' ) {
				$reference = 'spam_comment';
				$log = $this->prefs['spam']['log'];

				$comment_author_points = $this->prefs['spam']['creds'];
				$content_author_points = $this->prefs['spam']['author'];
			}

			// Trashed Comments
			elseif ( $new_status == 'trash' ) {
				$reference = 'deleted_comment';
				$log = $this->prefs['trash']['log'];

				$comment_author_points = $this->prefs['trash']['creds'];
				$content_author_points = $this->prefs['trash']['author'];
			}

			// Comment Author
			if ( ! $this->core->exclude_user( $comment_author ) && $comment_author_points != $this->core->zero() ) {

				// Check if we are allowed to comment our own comment and are doing it
				if ( $this->prefs['limits']['self_reply'] != 0 && $comment->comment_parent != 0 ) {
					$parent = get_comment( $comment->comment_parent );
					// Comment author is not replying to their own comments
					if ( $parent->user_id != $comment_author ) {
						$this->core->add_creds(
							$reference,
							$comment_author,
							$comment_author_points,
							$log,
							$comment->comment_ID,
							array( 'ref_type' => 'comment' ),
							$this->mycred_type
						);
					}
				}
				// Else
				else {
					$this->core->add_creds(
						$reference,
						$comment_author,
						$comment_author_points,
						$log,
						$comment->comment_ID,
						array( 'ref_type' => 'comment' ),
						$this->mycred_type
					);
				}

			}

			if ( $content_author === NULL ) return;

			// Content Author
			if ( ! $this->core->exclude_user( $content_author ) && $content_author_points != $this->core->zero() ) {
				$this->core->add_creds(
					$reference,
					$content_author,
					$content_author_points,
					$log,
					$comment->comment_ID,
					array( 'ref_type' => 'comment' ),
					$this->mycred_type
				);
			}

		}

		/**
		 * Check if user exceeds limit
		 * @since 1.1.1
		 * @version 1.1
		 */
		public function user_exceeds_limit( $user_id = NULL, $post_id = NULL ) {

			if ( ! isset( $this->prefs['limits'] ) ) return false;

			// Prep
			$today = date_i18n( 'Y-m-d' );

			// First we check post limit
			if ( $this->prefs['limits']['per_post'] > 0 ) {
				$post_limit = 0;

				// Grab limit
				if ( ! $this->is_main_type )
					$limit = mycred_get_user_meta( $user_id, 'mycred_comment_limit_post_' . $this->mycred_type, '', true );
				else
					$limit = mycred_get_user_meta( $user_id, 'mycred_comment_limit_post', '', true );

				// Apply default if none exist
				if ( empty( $limit ) ) $limit = array( $post_id => $post_limit );

				// Check if post_id is in limit array
				if ( array_key_exists( $post_id, $limit ) ) {
					$post_limit = $limit[ $post_id ];

					// Limit is reached
					if ( $post_limit >= $this->prefs['limits']['per_post'] ) return true;
				}

				// Add / Replace post_id counter with an incremented value
				$limit[ $post_id ] = $post_limit+1;

				// Save
				if ( ! $this->is_main_type )
					mycred_update_user_meta( $user_id, 'mycred_comment_limit_post_' . $this->mycred_type, '', $limit );
				else
					mycred_update_user_meta( $user_id, 'mycred_comment_limit_post', '', $limit );

			}

			// Second we check daily limit
			if ( $this->prefs['limits']['per_day'] > 0 ) {
				$daily_limit = 0;

				// Grab limit
				if ( ! $this->is_main_type )
					$limit = mycred_get_user_meta( $user_id, 'mycred_comment_limit_day_' . $this->mycred_type, '', true );
				else
					$limit = mycred_get_user_meta( $user_id, 'mycred_comment_limit_day', '', true );

				// Apply default if none exist
				if ( empty( $limit ) ) $limit = array();

				// Check if todays date is in limit
				if ( array_key_exists( $today, $limit ) ) {
					$daily_limit = $limit[ $today ];

					// Limit is reached
					if ( $daily_limit >= $this->prefs['limits']['per_day'] ) return true;
				}
				// Today is not in limit array so we reset to remove other dates
				else {
					$limit = array();
				}

				// Add / Replace todays counter with an imcremented value
				$limit[ $today ] = $daily_limit+1;

				// Save
				if ( ! $this->is_main_type )
					mycred_update_user_meta( $user_id, 'mycred_comment_limit_day_' . $this->mycred_type, '', $limit );
				else
					mycred_update_user_meta( $user_id, 'mycred_comment_limit_day', '', $limit );

			}

			return false;

		}

		/**
		 * Preferences for Commenting Hook
		 * @since 0.1
		 * @version 1.1
		 */
		public function preferences() {

			$prefs = $this->prefs;

			if ( ! isset( $prefs['limits'] ) )
				$prefs['limits'] = array(
					'self_reply' => 0,
					'per_post'   => 10,
					'per_day'    => 0
				);

			if ( function_exists( 'dsq_is_installed' ) )
				echo '<p>' . $this->core->template_tags_general( __( '%plural% are only awarded when your website has been synced with the Disqus server!', 'mycred' ) ) . '</p>';

?>
<label class="subheader"><?php _e( 'Approved Comment', 'mycred' ); ?></label>
<ol class="inline">
	<li style="min-width: 200px;">
		<label for="<?php echo $this->field_id( array( 'approved' => 'creds' ) ); ?>"><?php _e( 'Comment Author', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'approved' => 'creds' ) ); ?>" id="<?php echo $this->field_id( array( 'approved' => 'creds' ) ); ?>" value="<?php echo $this->core->number( $prefs['approved']['creds'] ); ?>" size="8" /></div>
	</li>
	<li>
		<label for="<?php echo $this->field_id( array( 'approved' => 'author' ) ); ?>"><?php _e( 'Content Author', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'approved' => 'author' ) ); ?>" id="<?php echo $this->field_id( array( 'approved' => 'author' ) ); ?>" value="<?php echo $this->core->number( $prefs['approved']['author'] ); ?>" size="8" /></div>
	</li>
	<li class="block empty">&nbsp;</li>
	<li class="block">
		<label for="<?php echo $this->field_id( array( 'approved' => 'log' ) ); ?>"><?php _e( 'Log template', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'approved' => 'log' ) ); ?>" id="<?php echo $this->field_id( array( 'approved' => 'log' ) ); ?>" value="<?php echo esc_attr( $prefs['approved']['log'] ); ?>" class="long" /></div>
		<span class="description"><?php echo $this->available_template_tags( array( 'general', 'comment' ) ); ?></span>
	</li>
</ol>
<label class="subheader"><?php _e( 'Comment Marked SPAM', 'mycred' ); ?></label>
<ol class="inline">
	<li style="min-width: 200px;">
		<label for="<?php echo $this->field_id( array( 'spam' => 'creds' ) ); ?>"><?php _e( 'Comment Author', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'spam' => 'creds' ) ); ?>" id="<?php echo $this->field_id( array( 'spam' => 'creds' ) ); ?>" value="<?php echo $this->core->number( $prefs['spam']['creds'] ); ?>" size="8" /></div>
	</li>
	<li>
		<label for="<?php echo $this->field_id( array( 'spam' => 'creds' ) ); ?>"><?php _e( 'Content Author', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'spam' => 'author' ) ); ?>" id="<?php echo $this->field_id( array( 'spam' => 'author' ) ); ?>" value="<?php echo $this->core->number( $prefs['spam']['author'] ); ?>" size="8" /></div>
	</li>
	<li class="block empty">&nbsp;</li>
	<li class="block">
		<label for="<?php echo $this->field_id( array( 'spam' => 'log' ) ); ?>"><?php _e( 'Log template', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'spam' => 'log' ) ); ?>" id="<?php echo $this->field_id( array( 'spam' => 'log' ) ); ?>" value="<?php echo esc_attr( $prefs['spam']['log'] ); ?>" class="long" /></div>
		<span class="description"><?php echo $this->available_template_tags( array( 'general', 'comment' ) ); ?></span>
	</li>
</ol>
<label class="subheader"><?php _e( 'Trashed / Unapproved Comments', 'mycred' ); ?></label>
<ol class="inline">
	<li style="min-width: 200px;">
		<label for="<?php echo $this->field_id( array( 'trash' => 'creds' ) ); ?>"><?php _e( 'Comment Author', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'trash' => 'creds' ) ); ?>" id="<?php echo $this->field_id( array( 'trash' => 'creds' ) ); ?>" value="<?php echo $this->core->number( $prefs['trash']['creds'] ); ?>" size="8" /></div>
	</li>
	<li>
		<label for="<?php echo $this->field_id( array( 'trash' => 'author' ) ); ?>"><?php _e( 'Content Author', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'trash' => 'author' ) ); ?>" id="<?php echo $this->field_id( array( 'trash' => 'author' ) ); ?>" value="<?php echo $this->core->number( $prefs['trash']['author'] ); ?>" size="8" /></div>
	</li>
	<li class="block empty">&nbsp;</li>
	<li class="block">
		<label for="<?php echo $this->field_id( array( 'trash' => 'log' ) ); ?>"><?php _e( 'Log template', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'trash' => 'log' ) ); ?>" id="<?php echo $this->field_id( array( 'trash' => 'log' ) ); ?>" value="<?php echo esc_attr( $prefs['trash']['log'] ); ?>" class="long" /></div>
		<span class="description"><?php echo $this->available_template_tags( array( 'general', 'comment' ) ); ?></span>
	</li>
</ol>
<label class="subheader"><?php _e( 'Limits', 'mycred' ); ?></label>
<ol>
	<li>
		<label for="<?php echo $this->field_id( array( 'limits' => 'per_post' ) ); ?>"><?php _e( 'Limit per post', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'limits' => 'per_post' ) ); ?>" id="<?php echo $this->field_id( array( 'limits' => 'per_post' ) ); ?>" value="<?php echo $prefs['limits']['per_post']; ?>" size="8" /></div>
		<span class="description"><?php echo $this->core->template_tags_general( __( 'The number of comments per post that grants %_plural% to the comment author. Use zero for unlimited.', 'mycred' ) ); ?></span>
	</li>
	<li class="empty">&nbsp;</li>
	<li>
		<label for="<?php echo $this->field_id( array( 'limits' => 'per_day' ) ); ?>"><?php _e( 'Limit per day', 'mycred' ); ?></label>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'limits' => 'per_day' ) ); ?>" id="<?php echo $this->field_id( array( 'limits' => 'per_day' ) ); ?>" value="<?php echo $prefs['limits']['per_day']; ?>" size="8" /></div>
		<span class="description"><?php echo $this->core->template_tags_general( __( 'Number of comments per day that grants %_plural%. Use zero for unlimited.', 'mycred' ) ); ?></span>
	</li>
	<li class="empty">&nbsp;</li>
	<li>
		<input type="checkbox" name="<?php echo $this->field_name( array( 'limits' => 'self_reply' ) ); ?>" id="<?php echo $this->field_id( array( 'limits' => 'self_reply' ) ); ?>" <?php checked( $prefs['limits']['self_reply'], 1 ); ?> value="1" />
		<label for="<?php echo $this->field_id( array( 'limits' => 'self_reply' ) ); ?>"><?php echo $this->core->template_tags_general( __( '%plural% is to be awarded even when comment authors reply to their own comment.', 'mycred' ) ); ?></label>
	</li>
</ol>
<?php

		}

		/**
		 * Sanitise Preference
		 * @since 1.1.1
		 * @version 1.0
		 */
		function sanitise_preferences( $data ) {

			$new_data = $data;

			$new_data['limits']['per_post'] = ( ! empty( $data['limits']['per_post'] ) ) ? abs( $data['limits']['per_post'] ) : 0;
			$new_data['limits']['per_day'] = ( ! empty( $data['limits']['per_day'] ) ) ? abs( $data['limits']['per_day'] ) : 0;
			$new_data['limits']['self_reply'] = ( isset( $data['limits']['self_reply'] ) ) ? $data['limits']['self_reply'] : 0;

			return $new_data;

		}

	}
endif;

/**
 * Hooks for Clicking on Links
 * @since 1.1
 * @version 1.1
 */
if ( ! class_exists( 'myCRED_Hook_Click_Links' ) ) :
	class myCRED_Hook_Click_Links extends myCRED_Hook {

		/**
		 * Construct
		 */
		function __construct( $hook_prefs, $type = 'mycred_default' ) {

			parent::__construct( array(
				'id'       => 'link_click',
				'defaults' => array(
					'limit_by' => 'none',
					'creds'    => 1,
					'log'      => '%plural% for clicking on link to: %url%'
				)
			), $hook_prefs, $type );

		}

		/**
		 * Run
		 * @since 1.1
		 * @version 1.0
		 */
		public function run() {

			global $mycred_link_points;
			$mycred_link_points = false;

			add_action( 'mycred_front_enqueue',        array( $this, 'register_script' )       );
			add_action( 'wp_footer',                   array( $this, 'footer' )                );

			add_shortcode( 'mycred_link',              'mycred_render_shortcode_link'          );
			add_action( 'wp_ajax_mycred-click-points', array( $this, 'ajax_call_link_points' ) );

			add_filter( 'mycred_parse_tags_link',      array( $this, 'parse_custom_tags' ), 10, 2 );

		}

		/**
		 * Customize Limit Options
		 * @since 1.1
		 * @version 1.0
		 */
		public function custom_limit() {

			return array(
				'none' => __( 'No limit', 'mycred' ),
				'url'  => __( 'Once for each unique URL', 'mycred' ),
				'id'   => __( 'Once for each unique link id', 'mycred' )
			);

		}

		/**
		 * Parse Custom Tags in Log
		 * @since 1.1
		 * @version 1.1.1
		 */
		public function parse_custom_tags( $content, $log_entry ) {

			$data = maybe_unserialize( $log_entry->data );
			$content = str_replace( '%url%', $data['link_url'], $content );
			$content = str_replace( '%id%',  $data['link_id'], $content );
			if ( isset( $data['link_title'] ) )
				$content = str_replace( '%title%',  $data['link_title'], $content );

			return $content;

		}

		/**
		 * Register Script
		 * @since 1.1
		 * @version 1.0
		 */
		public function register_script() {

			wp_register_script(
				'mycred-link-points',
				plugins_url( 'assets/js/links.js', myCRED_THIS ),
				array( 'jquery' ),
				myCRED_VERSION . '.1',
				true
			);

		}

		/**
		 * WP Fotter
		 * @since 1.1
		 * @version 1.0
		 */
		public function footer() {

			global $mycred_link_points;

			if ( $mycred_link_points === true ) {

				wp_localize_script(
					'mycred-link-points',
					'myCREDlink',
					array(
						'ajaxurl' => admin_url( 'admin-ajax.php' ),
						'token'   => wp_create_nonce( 'mycred-link-points' )
					)
				);
				wp_enqueue_script( 'mycred-link-points' );

			}

		}

		/**
		 * Custom Has Entry Check
		 * @since 1.1
		 * @version 1.1.1
		 */
		public function has_entry( $action = '', $reference = '', $user_id = '', $data = '', $type = '' ) {

			global $wpdb;

			if ( $this->prefs['limit_by'] == 'url' ) {
				$reference = urldecode( $reference );
				$string = '%s:8:"link_url";s:' . strlen( $reference ) . ':"' . $reference . '";%';
			}
			elseif ( $this->prefs['limit_by'] == 'id' ) {
				$string = '%s:7:"link_id";s:' . strlen( $reference ) . ':"' . $reference . '";%';
			}
			else return false;

			$sql = "SELECT id FROM {$this->core->log_table} WHERE ref = %s AND user_id = %d AND data LIKE %s AND ctype = %s;";
			$wpdb->get_results( $wpdb->prepare( $sql, $action, $user_id, $string, $this->mycred_type ) );
			if ( $wpdb->num_rows > 0 ) return true;

			return false;

		}

		/**
		 * AJAX Call Handler
		 * @since 1.1
		 * @version 1.4
		 */
		public function ajax_call_link_points() {

			// We must be logged in
			if ( ! is_user_logged_in() ) die( json_encode( 100 ) );

			// Security
			check_ajax_referer( 'mycred-link-points', 'token' );

			// Current User
			$user_id = get_current_user_id();

			// Check if user should be excluded
			if ( $this->core->exclude_user( $user_id ) ) die( json_encode( 200 ) );

			// Token
			if ( ! isset( $_POST['key'] ) ) die( json_encode( 300 ) );
			$token = mycred_verify_token( $_POST['key'], 3 );
			if ( $token === false ) die( json_encode( 305 ) );

			list ( $amount, $type, $id ) = $token;
			if ( $amount == '' || $type == '' || $id == '' ) die( json_encode( 310 ) );

			// Bail now if this was not intenteded for this type
			if ( $type != $this->mycred_type ) return;

			// Amount
			if ( $amount == 0 )
				$amount = $this->prefs['creds'];
			else
				$amount = $this->core->number( $amount );

			if ( $amount == 0 || $amount == $this->core->zero() ) die( json_encode( 400 ) );

			$data = array(
				'ref_type'   => 'link',
				'link_url'   => $_POST['url'],
				'link_id'    => $id,
				'link_title' => ( isset( $_POST['etitle'] ) ) ? $_POST['etitle'] : ''
			);

			// Limits
			if ( $this->prefs['limit_by'] == 'url' ) {
				if ( ! isset( $_POST['url'] ) || empty( $_POST['url'] ) ) die( json_encode( 500 ) );
				if ( $this->has_clicked( $user_id, 'link_url', $data['link_url'] ) ) die( json_encode( 600 ) );
			}
			elseif ( $this->prefs['limit_by'] == 'id' ) {
				if ( $this->has_clicked( $user_id, 'link_id', $data['link_id'] ) ) die( json_encode( 700 ) );
			}

			// Execute
			$this->core->add_creds(
				'link_click',
				$user_id,
				$amount,
				$this->prefs['log'],
				'',
				$data,
				$type
			);

			// Report the good news
			wp_send_json( 'done' );

		}

		/**
		 * Has Clicked
		 * Checks if a user has received points for a link based on either
		 * an ID or URL.
		 * @since 1.3.3.1
		 * @version 1.0
		 */
		public function has_clicked( $user_id = NULL, $by = '', $check = '' ) {

			global $wpdb;

			$rows = $wpdb->get_results( $wpdb->prepare( "
				SELECT * 
				FROM {$this->core->log_table} 
				WHERE ref = %s 
					AND user_id = %d
					AND ctype = %s", 'link_click', $user_id, $this->mycred_type ) );

			if ( $wpdb->num_rows == 0 ) return false;

			$reply = false;
			foreach ( $rows as $row ) {
				$data = maybe_unserialize( $row->data );
				if ( ! is_array( $data ) || ! isset( $data[ $by ] ) ) continue;

				if ( $data[ $by ] == $check ) {
					$reply = true;
					break;
				}
			}

			$wpdb->flush();

			return $reply;

		}

		/**
		 * Preference for Link Click Hook
		 * @since 1.1
		 * @version 1.0.2
		 */
		public function preferences() {

			$prefs = $this->prefs;

?>
<label class="subheader"><?php echo $this->core->plural(); ?></label>
<ol>
	<li>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( 'creds' ); ?>" id="<?php echo $this->field_id( 'creds' ); ?>" value="<?php echo $this->core->number( $prefs['creds'] ); ?>" size="8" /></div>
		<span class="description"><?php _e( 'The default amount to award for clicking on links. You can override this in the shortcode.', 'mycred' ); ?></span>
	</li>
</ol>
<label class="subheader"><?php _e( 'Log Template', 'mycred' ); ?></label>
<ol>
	<li>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( 'log' ); ?>" id="<?php echo $this->field_id( 'log' ); ?>" value="<?php echo esc_attr( $prefs['log'] ); ?>" class="long" /></div>
		<span class="description"><?php echo $this->available_template_tags( array( 'general', 'user' ) ); ?> <?php _e( 'Custom tags: %url%, %title% or %id%.', 'mycred' ); ?></span>
	</li>
</ol>
<label class="subheader"><?php _e( 'Limits', 'mycred' ); ?></label>
<ol>
	<li>
<?php 

			add_filter( 'mycred_hook_impose_limits', array( $this, 'custom_limit' ) );
			$this->impose_limits_dropdown( 'limit_by', false );

?>
	</li>
	<li><strong><?php _e( 'Note!', 'mycred' ); ?></strong> <?php echo $this->core->template_tags_general( __( 'If no ID is set when using the mycred_link shortcode, the shortcode will generate one automatically based on the value set under href. If you are using this feature for "sharing" content, it is recommended that you limit by ID.', 'mycred' ) ); ?></li>
</ol>
<label class="subheader"><?php _e( 'Available Shortcode', 'mycred' ); ?></label>
<ol>
	<li><a href="http://codex.mycred.me/shortcodes/mycred_link/" target="_blank">[mycred_link]</a></li>
</ol>
<?php

		}

	}
endif;

/**
 * Hooks for Viewing Videos
 * @since 1.2
 * @version 1.0
 */
if ( ! class_exists( 'myCRED_Hook_Video_Views' ) ) :
	class myCRED_Hook_Video_Views extends myCRED_Hook {

		/**
		 * Construct
		 */
		function __construct( $hook_prefs, $type = 'mycred_default' ) {

			parent::__construct( array(
				'id'       => 'video_view',
				'defaults' => array(
					'creds'    => 1,
					'log'      => '%plural% for viewing video',
					'logic'    => 'play',
					'interval' => '',
					'leniency' => 10
				)
			), $hook_prefs, $type );

		}

		/**
		 * Run
		 * @since 1.2
		 * @version 1.0.1
		 */
		public function run() {

			global $mycred_video_points;

			$mycred_video_points = array();

			if ( ! shortcode_exists( 'mycred_video' ) )
				add_shortcode( 'mycred_video', 'mycred_render_shortcode_video' );

			add_action( 'mycred_front_enqueue',          array( $this, 'register_script' ) );
			add_action( 'wp_ajax_mycred-viewing-videos', array( $this, 'ajax_call_video_points' ) );
			add_action( 'wp_footer',                     array( $this, 'footer' ) );

		}

		/**
		 * Register Script
		 * @since 1.2
		 * @version 1.1
		 */
		public function register_script() {

			wp_register_script(
				'mycred-video-points',
				plugins_url( 'assets/js/video.js', myCRED_THIS ),
				array( 'jquery' ),
				myCRED_VERSION . '.1',
				true
			);

			wp_localize_script(
				'mycred-video-points',
				'myCRED_Video',
				array(
					'ajaxurl'          => admin_url( 'admin-ajax.php' ),
					'token'            => wp_create_nonce( 'mycred-video-points' ),
					'default_interval' => abs( $this->prefs['interval']*1000 ),
					'default_logic'    => $this->prefs['logic']
				)
			);
			wp_enqueue_script( 'mycred-video-points' );

			wp_register_script(
				'mycred-video-youtube',
				plugins_url( 'assets/js/youtube.js', myCRED_THIS ),
				array( 'jquery' ),
				myCRED_VERSION . '.1',
				true
			);

		}

		/**
		 * Load Scripts in Footer
		 * @since 1.3.3
		 * @version 1.0.1
		 */
		public function footer() {

			global $mycred_video_points;

			// If youtube videos are used
			if ( in_array( 'youtube', (array) $mycred_video_points ) )
				wp_enqueue_script( 'mycred-video-youtube' );

		}

		/**
		 * AJAX Call Handler
		 * @since 1.2
		 * @version 1.2.1
		 */
		public function ajax_call_video_points() {

			// We must be logged in
			if ( ! is_user_logged_in() ) die;

			// Security
			check_ajax_referer( 'mycred-video-points', 'token' );

			// We are only interested in handling our own point type
			// We can not die here since then the hook will not fire for the correct point type.
			if ( ! isset( $_POST['type'] ) || $this->mycred_type != sanitize_key( $_POST['type'] ) ) return;

			// Get user id
			$user_id = get_current_user_id();

			// Decode the key giving us the video shortcode setup
			// This will prevent users from manipulating the shortcode output
			$setup = mycred_verify_token( $_POST['setup'], 5 );
			if ( $setup === false ) die( 0 );

			list ( $source, $video_id, $amount, $logic, $interval ) = $setup;

			// Required
			if ( empty( $source ) || empty( $video_id ) ) die;

			// Prep
			$amount = $this->core->number( $amount );
			$interval = abs( $interval / 1000 );

			// Get playback details
			$actions = sanitize_text_field( $_POST['video_a'] );
			$seconds = abs( $_POST['video_b'] );
			$duration = abs( $_POST['video_c'] );
			$state = absint( $_POST['video_d'] );

			// Apply Leniency
			$leniency = $duration * ( $this->prefs['leniency'] / 100 );
			$leniency = floor( $leniency );
			$watched = $seconds + $leniency;

			$status = 'silence';

			switch ( $logic ) {

				// Award points when video starts
				case 'play' :

					if ( $state == 1 ) {
						if ( ! $this->has_entry( 'watching_video', '', $user_id, $video_id, $this->mycred_type ) ) {
							// Execute
							$this->core->add_creds(
								'watching_video',
								$user_id,
								$amount,
								$this->prefs['log'],
								0,
								$video_id,
								$this->mycred_type
							);

							$status = 'added';
						}
						else {
							$status = 'max';
						}
					}

				break;

				// Award points when video is viewed in full
				case 'full' :

					// Check for skipping or if we watched more (with leniency) then the video length
					if ( ! preg_match( '/22/', $actions, $matches ) || $watched >= $duration ) {
						if ( $state == 0 ) {
							if ( ! $this->has_entry( 'watching_video', '', $user_id, $video_id, $this->mycred_type ) ) {
								// Execute
								$this->core->add_creds(
									'watching_video',
									$user_id,
									$amount,
									$this->prefs['log'],
									0,
									$video_id,
									$this->mycred_type
								);

								$status = 'added';
							}
							else {
								$status = 'max';
							}
						}
					}

				break;

				// Award points in intervals
				case 'interval' :

					// The maximum points a video can earn you
					$num_intervals = floor( $duration / $interval );
					$max = abs( $num_intervals * $amount );
					$users_log = $this->get_users_video_log( $video_id, $user_id );

					// Film is playing and we just started
					if ( $state == 1 && $users_log === NULL ) {
						// Add points without using mycred_add to prevent
						// notifications from being sent as this amount will change.
						$this->core->update_users_balance( $user_id, $amount );
						$this->core->add_to_log(
							'watching_video',
							$user_id,
							$amount,
							$this->prefs['log'],
							0,
							$video_id,
							$this->mycred_type
						);

						$status = 'added';
					}

					// Film is playing and we have not yet reached maximum on this movie
					elseif ( $state == 1 && isset( $users_log->creds ) && $users_log->creds+$amount <= $max ) {
						$this->update_creds( $users_log->id, $user_id, $users_log->creds+$amount );
						$this->core->update_users_balance( $user_id, $amount );
						$amount = $users_log->creds+$amount;

						$status = 'added';
					}

					// Film has ended and we have not reached maximum
					elseif ( $state == 0 && isset( $users_log->creds ) && $users_log->creds+$amount <= $max ) {
						$this->update_creds( $users_log->id, $user_id, $users_log->creds+$amount );
						$this->core->update_users_balance( $user_id, $amount );
						$amount = $users_log->creds+$amount;

						$status = 'max';

						// If enabled, add notification
						if ( function_exists( 'mycred_add_new_notice' ) ) {
							if ( $amount < 0 )
								$color = '<';
							else
								$color = '>';

							$message = str_replace( '%amount%', $amount, $this->prefs['template'] );
							if ( ! empty( $message ) )
								mycred_add_new_notice( array( 'user_id' => $user_id, 'message' => $message, 'color' => $color ) );
						}
					}

				break;
			}

			wp_send_json( array(
				'status'   => $status,
				'video_id' => $video_id,
				'amount'   => $amount,
				'duration' => $duration,
				'seconds'  => $seconds,
				'watched'  => $watched,
				'actions'  => $actions,
				'state'    => $state,
				'logic'    => $logic,
				'interval' => $interval
			) );

		}

		/**
		 * Get Users Video Log
		 * Returns the log for a given video id.
		 * @since 1.2
		 * @version 1.0.1
		 */
		public function get_users_video_log( $video_id, $user_id ) {

			global $wpdb;

			$sql = "SELECT * FROM {$this->core->log_table} WHERE user_id = %d AND data = %s AND ctype = %s;";
			return $wpdb->get_row( $wpdb->prepare( $sql, $user_id, $video_id, $this->mycred_type ) );

		}

		/**
		 * Update Points
		 * @since 1.2
		 * @version 1.1
		 */
		public function update_creds( $row_id, $user_id, $amount ) {

			// Prep format
			if ( ! isset( $this->core->format['decimals'] ) )
				$decimals = $this->core->core['format']['decimals'];

			else
				$decimals = $this->core->format['decimals'];

			if ( $decimals > 0 )
				$format = '%f';

			else
				$format = '%d';

			$amount = $this->core->number( $amount );

			global $wpdb;

			$wpdb->update(
				$this->core->log_table,
				array( 'creds' => $amount ),
				array( 'id'    => $row_id ),
				array( $format ),
				array( '%d' )
			);

		}

		/**
		 * Preference for Viewing Videos
		 * @since 1.2
		 * @version 1.1
		 */
		public function preferences() {

			$prefs = $this->prefs;

?>
<label class="subheader"><?php echo $this->core->plural(); ?></label>
<ol>
	<li>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( 'creds' ); ?>" id="<?php echo $this->field_id( 'creds' ); ?>" value="<?php echo $this->core->number( $prefs['creds'] ); ?>" size="8" /></div>
		<span class="description"><?php _e( 'Amount to award for viewing videos.', 'mycred' ); ?></span>
	</li>
</ol>
<label class="subheader"><?php _e( 'Log Template', 'mycred' ); ?></label>
<ol>
	<li>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( 'log' ); ?>" id="<?php echo $this->field_id( 'log' ); ?>" value="<?php echo esc_attr( $prefs['log'] ); ?>" class="long" /></div>
		<span class="description"><?php echo $this->available_template_tags( array( 'general', 'video' ) ); ?></span>
	</li>
</ol>
<label class="subheader"><?php _e( 'Award Logic', 'mycred' ); ?></label>
<ol>
	<li><?php echo $this->core->template_tags_general( __( 'Select when %_plural% should be awarded or deducted.', 'mycred' ) ); ?></li>
	<li><input type="radio" name="<?php echo $this->field_name( 'logic' ); ?>" id="<?php echo $this->field_id( array( 'logic' => 'play' ) ); ?>"<?php checked( $prefs['logic'], 'play' ); ?> value="play" /> <label for="<?php echo $this->field_id( array( 'logic' => 'play' ) ); ?>"><?php _e( 'Play - As soon as video starts playing.', 'mycred' ); ?></label></li>
	<li><input type="radio" name="<?php echo $this->field_name( 'logic' ); ?>" id="<?php echo $this->field_id( array( 'logic' => 'full' ) ); ?>"<?php checked( $prefs['logic'], 'full' ); ?> value="full" /> <label for="<?php echo $this->field_id( array( 'logic' => 'full' ) ); ?>"><?php _e( 'Full - First when the entire video has played.', 'mycred' ); ?></label></li>
	<li><input type="radio" name="<?php echo $this->field_name( 'logic' ); ?>" id="<?php echo $this->field_id( array( 'logic' => 'interval' ) ); ?>"<?php checked( $prefs['logic'], 'interval' ); ?> value="interval" /> <label for="<?php echo $this->field_id( array( 'logic' => 'interval' ) ); ?>"><?php echo $this->core->template_tags_general( __( 'Interval - For each x number of seconds watched.', 'mycred' ) ); ?></label></li>
</ol>
<div id="video-interval"<?php if ( $prefs['logic'] == 'play' || $prefs['logic'] == 'full' ) echo ' style="display: none;"';?>>
	<label class="subheader"><?php _e( 'Interval', 'mycred' ); ?></label>
	<ol>
		<li><?php _e( 'Number of seconds', 'mycred' ); ?></li>
		<li>
			<div class="h2"><input type="text" name="<?php echo $this->field_name( 'interval' ); ?>" id="<?php echo $this->field_id( 'interval' ); ?>" value="<?php echo $prefs['interval']; ?>" size="8" /></div>
		</li>
	</ol>
</div>
<div id="video-leniency"<?php if ( $prefs['logic'] == 'play' ) echo ' style="display: none;"';?>>
	<label class="subheader"><?php _e( 'Leniency', 'mycred' ); ?></label>
	<ol>
		<li><?php _e( 'The maximum percentage a users view of a movie can differ from the actual length.', 'mycred' ); ?></li>
		<li>
			<div class="h2"><input type="text" name="<?php echo $this->field_name( 'leniency' ); ?>" id="<?php echo $this->field_id( 'leniency' ); ?>" value="<?php echo $prefs['leniency']; ?>" size="4" /> %</div>
			<span class="description"><?php echo _e( 'Do not set this value to zero! A lot of thing can happen while a user watches a movie and sometimes a few seconds can drop of the counter due to buffering or play back errors.', 'mycred' ); ?></span>
		</li>
	</ol>
</div>
<label class="subheader"><?php _e( 'Available Shortcode', 'mycred' ); ?></label>
<ol>
	<li><a href="http://codex.mycred.me/shortcodes/mycred_video/" target="_blank">[mycred_video]</a></li>
</ol>
<script type="text/javascript">
jQuery(function($){

	$( 'input[name="<?php echo $this->field_name( 'logic' ); ?>"]' ).change(function(){

		if ( $(this).val() == 'interval' ) {
			$('#video-interval').show();
			$('#video-leniency').show();
		}
		else if ( $(this).val() == 'full' ) {
			$('#video-interval').hide();
			$('#video-leniency').show();
		}
		else {
			$('#video-interval').hide();
			$('#video-leniency').hide();
		}

	});

});
</script>
<?php

		}

	}
endif;

/**
 * Hook for affiliations
 * @since 1.4
 * @version 1.3.1
 */
if ( ! class_exists( 'myCRED_Hook_Affiliate' ) ) :
	class myCRED_Hook_Affiliate extends myCRED_Hook {

		public $ref_key = '';
		public $limit_by = array();

		/**
		 * Construct
		 */
		function __construct( $hook_prefs, $type = 'mycred_default' ) {

			parent::__construct( array(
				'id'       => 'affiliate',
				'defaults' => array(
					'visit'    => array(
						'creds'    => 1,
						'log'      => '%plural% for referring a visitor',
						'limit'    => 1,
						'limit_by' => 'total'
					),
					'signup'    => array(
						'creds'    => 10,
						'log'      => '%plural% for referring a new member',
						'limit'    => 1,
						'limit_by' => 'total'
					),
					'setup' => array(
						'links'    => 'username',
						'IP'       => 1
					),
					'buddypress' => array(
						'profile'  => 0,
						'priority' => 10,
						'title'    => __( 'Affiliate Program', 'mycred' ),
						'desc'     => ''
					)
				)
			), $hook_prefs, $type );

			// Let others play with the limit by
			$this->limit_by = apply_filters( 'mycred_affiliate_limit_by', array(
				'total' => __( 'Total', 'mycred' ),
				'daily' => __( 'Per Day', 'mycred' )
			), $this );

			// Let others play with the ref key
			$this->ref_key = apply_filters( 'mycred_affiliate_key', 'mref', $this );

			add_filter( 'mycred_parse_log_entry_signup_referral', array( $this, 'parse_log_entry' ), 10, 2 );

		}

		/**
		 * Run
		 * @since 1.4
		 * @version 1.2.1
		 */
		public function run() {

			// Insert into BuddyPress profile
			if ( function_exists( 'bp_is_active' ) && bp_is_active( 'xprofile' ) && $this->prefs['buddypress']['profile'] )
				add_action( 'bp_after_profile_loop_content', array( $this, 'buddypress_profile' ), $this->prefs['buddypress']['priority'] );

			// Hook into user activation
			if ( function_exists( 'buddypress' ) && apply_filters( 'bp_core_signup_send_activation_key', true ) )
				add_action( 'mycred_bp_user_activated', array( $this, 'verified_signup' ) );

			// Register Shortcodes
			add_filter( 'mycred_affiliate_link_' . $this->mycred_type, array( $this, 'shortcode_affiliate_link' ), 10, 2 );
			add_filter( 'mycred_affiliate_id_' . $this->mycred_type,   array( $this, 'shortcode_affiliate_id' ), 10, 2 );

			add_filter( 'mycred_referral_keys', array( $this, 'add_key' ) );

			// Logged in users do not get points
			if ( is_user_logged_in() && apply_filters( 'mycred_affiliate_allow_members', false ) === false ) return;

			// Points for visits
			if ( $this->prefs['visit']['creds'] != 0 || $this->prefs['signup']['creds'] != 0 )
				add_action( 'mycred_referred_visit', array( $this, 'site_visits' ) );

			// Points for signups
			if ( $this->prefs['signup']['creds'] != 0 )
				add_action( 'mycred_referred_signup', array( $this, 'site_signup' ) );

		}

		/**
		 * Parse Log Entry
		 * Add support for user related template tags in signup referrals.
		 * @since 1.4
		 * @version 1.0
		 */
		public function parse_log_entry( $content, $entry ) {

			$user_id = absint( $entry->ref_id );
			return $this->core->template_tags_user( $content, $user_id );

		}

		/**
		 * Add Referral Key
		 * @since 1.5.3
		 * @version 1.0
		 */
		public function add_key( $keys ) {

			if ( ! isset( $_GET[ $this->ref_key ] ) ) return $keys;

			if ( ! in_array( $this->ref_key, $keys ) )
				$keys[] = $this->ref_key;

			return $keys;

		}

		/**
		 * Shortcode: Affiliate Link
		 * Appends the current users affiliate link to either a given
		 * URL or if not set, the current URL. If user is not logged in,
		 * the set URL is returned. If this is not set, the shortcode
		 * will return an empty string.
		 * @since 1.4
		 * @version 1.1
		 */
		public function shortcode_affiliate_link( $content = '', $atts ) {

			extract( shortcode_atts( array(
				'url'     => 0,
				'user_id' => '',
				'post_id' => ''
			), $atts ) );

			if ( ! is_user_logged_in() && $user_id == '' )
				return $url;

			if ( $user_id == '' )
				$user_id = get_current_user_id();

			if ( $post_id != '' )
				$url = get_permalink( $post_id );

			return $this->get_ref_link( $user_id, $url );

		}

		/**
		 * Shortcode: Affiliate ID
		 * Returns the current users affiliate ID. Returns an empty
		 * string if the user is not logged in.
		 * @since 1.4
		 * @version 1.1
		 */
		public function shortcode_affiliate_id( $content = '', $atts ) {

			extract( shortcode_atts( array(
				'user_id' => ''
			), $atts ) );

			if ( ! is_user_logged_in() && $user_id == '' )
				$ref_id = '';

			else {

				if ( $user_id == '' )
					$user_id = get_current_user_id();

				$ref_id = $this->get_ref_id( $user_id );

			}

			return apply_filters( 'mycred_affiliate_id', $ref_id, $atts, $this );

		}

		/**
		 * BuddyPress Profile
		 * @since 1.4
		 * @version 1.1
		 */
		public function buddypress_profile() {

			// Prep
			$output = '';
			$user_id = bp_displayed_user_id();

			// Check for exclusion
			if ( $this->core->exclude_user( $user_id ) ) return;

			// If it is my profile or other members allowed to view eachothers profiles or if we are admins
			if ( bp_is_my_profile() || mycred_is_admin() ) {

				$users_ref_link = $this->get_ref_link( $user_id, home_url( '/' ) );

				$output .= '<div class="bp-widget mycred">';

				// Title if set
				if ( $this->prefs['buddypress']['title'] != '' )
					$output .= '<h4>' . $this->prefs['buddypress']['title'] . '</h4>';

				// Table
				$output .= '<table class="profile-fields">';
				$output .= sprintf( '<tr class="field_1 field_ref_link"><td class="label">%s</td><td>%s</td></tr>', __( 'Link', 'mycred' ), $users_ref_link );

				// Show Visitor referral count
				if ( $this->prefs['visit']['creds'] != 0 )
					$output .= sprintf( '<tr class="field_2 field_ref_count_visit"><td class="label">%s</td><td>%s</td></tr>', __( 'Visitors Referred', 'mycred' ), mycred_count_ref_instances( 'visitor_referral', $user_id, $this->mycred_type ) );

				// Show Signup referral count
				if ( $this->prefs['signup']['creds'] != 0 )
					$output .= sprintf( '<tr class="field_3 field_ref_count_signup"><td class="label">%s</td><td>%s</td></tr>', __( 'Signups Referred', 'mycred' ), mycred_count_ref_instances( 'signup_referral', $user_id, $this->mycred_type ) );

				$output .= '</table>';

				// Description if set
				if ( ! empty( $this->prefs['buddypress']['desc'] ) )
					$output .= wpautop( wptexturize( $this->prefs['buddypress']['desc'] ) );

				$output .= '</div>';
			}

			$output = do_shortcode( $output );
			echo apply_filters( 'mycred_affiliate_bp_profile', $output, $user_id, $users_ref_link, $this );

		}

		/**
		 * Visits
		 * @since 1.4
		 * @version 1.3
		 */
		public function site_visits() {

			// Required
			if ( ! isset( $_GET[ $this->ref_key ] ) || empty( $_GET[ $this->ref_key ] ) || isset( $_COOKIE[ 'mycred_ref' . $this->mycred_type ] ) ) return;

			// Attempt to get the user id based on the referral id
			$user_id = $this->get_user_id_from_ref_id( $_GET[ $this->ref_key ] );
			if ( $user_id !== NULL && ! is_user_logged_in() ) {

				// Attempt to get the users IP
				$IP = apply_filters( 'mycred_affiliate_IP', $_SERVER['REMOTE_ADDR'], 'visit', $this );
				if ( $IP != '' && $IP != '0.0.0.0' ) {

					// If points are awarded for visitor referrals
					$time = time();
					if ( $this->ref_counts( $user_id, $IP ) && ! $this->core->has_entry( 'visitor_referral', $time, $user_id ) ) {
						$this->core->add_creds(
							'visitor_referral',
							$user_id,
							$this->prefs['visit']['creds'],
							$this->prefs['visit']['log'],
							$time,
							$IP,
							$this->mycred_type
						);

						do_action( 'mycred_visitor_referral', $user_id, $IP, $this );
					}

				}

			}

			if ( ! headers_sent() )
				setcookie( 'mycred_ref' . $this->mycred_type, $_GET[ $this->ref_key ], apply_filters( 'mycred_affiliate_cookie', ( time()+3600*24 ), false, $this ), '/' );

			// If we allow signups, we set a cookie now
			if ( $this->prefs['signup']['creds'] != 0 && ! headers_sent() )
				setcookie( 'signup_ref' . $this->mycred_type, $_GET[ $this->ref_key ], apply_filters( 'mycred_affiliate_cookie', ( time()+3600*24 ), true, $this ), '/' );

		}

		/**
		 * Signups
		 * @since 1.4
		 * @version 1.2
		 */
		public function site_signup( $new_user_id ) {

			// Requirement
			$ref = false;
			$key = '';
			if ( isset( $_COOKIE[ 'signup_ref' . $this->mycred_type ] ) ) {
				$ref = $_COOKIE[ 'signup_ref' . $this->mycred_type ];
				$key = 'signup_ref' . $this->mycred_type;
			}
			elseif ( isset( $_COOKIE[ 'mycred_ref' . $this->mycred_type ] ) ) {
				$ref = $_COOKIE[ 'mycred_ref' . $this->mycred_type ];
				$key = 'mycred_ref' . $this->mycred_type;
			}

			if ( $ref === false ) return;

			// Attempt to get the user id based on the referrer
			$user_id = $this->get_user_id_from_ref_id( $ref );
			if ( $user_id === false ) {
				if ( ! headers_sent() )
					setcookie( $key, $ref, time()-3600, '/' );

				return;
			}

			// Delete Cookie
			if ( ! headers_sent() )
				setcookie( $key, $ref, time()-3600, '/' );

			// Attempt to get the users IP
			$IP = apply_filters( 'mycred_affiliate_IP', $_SERVER['REMOTE_ADDR'], 'signup', $this );
			if ( $IP != '' && $IP != '0.0.0.0' ) {

				if ( $this->ref_counts( $user_id, $IP, 'signup' ) ) {

					// Award when users account gets activated
					if ( function_exists( 'buddypress' ) && apply_filters( 'bp_core_signup_send_activation_key', true ) === true ) {
						mycred_add_user_meta( $new_user_id, 'referred_by', '', $user_id );
						mycred_add_user_meta( $new_user_id, 'referred_by_IP', '', $IP );
						mycred_add_user_meta( $new_user_id, 'referred_by_type', '', $this->mycred_type );
					}
					// Award now
					else {
						$this->core->add_creds(
							'signup_referral',
							$user_id,
							$this->prefs['signup']['creds'],
							$this->prefs['signup']['log'],
							$new_user_id,
							$IP,
							$this->mycred_type
						);

						do_action( 'mycred_signup_referral', $user_id, $IP, $new_user_id, $this );
					}

				}

			}

		}

		/**
		 * Verified Signup
		 * If signups need to be verified, award points now.
		 * @since 1.5
		 * @version 1.0
		 */
		public function verified_signup( $user_id ) {

			// Check if there is a referral
			$referred_by = mycred_get_user_meta( $user_id, 'referred_by', '', true );
			$referred_by_IP = mycred_get_user_meta( $user_id, 'referred_by_IP', '', true );
			$referred_type = mycred_get_user_meta( $user_id, 'referred_by_type', '', true );
			if ( $referred_by == '' || $referred_by_IP == '' || $this->mycred_type != $referred_type ) return;

			// Award
			$this->core->add_creds(
				'signup_referral',
				$referred_by,
				$this->prefs['signup']['creds'],
				$this->prefs['signup']['log'],
				$user_id,
				$referred_by_IP,
				$this->mycred_type
			);

			do_action( 'mycred_signup_referral', $referred_by, $referred_by_IP, $user_id, $this );

			// Clean up
			mycred_delete_user_meta( $user_id, 'referred_by' );
			mycred_delete_user_meta( $user_id, 'referred_by_IP' );
			mycred_delete_user_meta( $user_id, 'referred_by_type' );

		}

		/**
		 * Get Ref Link
		 * Returns a given users referral id with optional url appended.
		 * @since 1.4
		 * @version 1.0.1
		 */
		public function get_ref_link( $user_id = '', $url = '' ) {

			// User ID is required
			if ( empty( $user_id ) ) return '';

			// Get Ref ID
			$ref_id = $this->get_ref_id( $user_id );

			// Appent to specific URL
			if ( ! empty( $url ) )
				$link = add_query_arg( array( $this->ref_key => $ref_id ), $url );

			// Append to current URL
			else
				$link = add_query_arg( array( $this->ref_key => $ref_id ) );

			return apply_filters( 'mycred_affiliate_get_ref_link', esc_url( $link ), $user_id, $url, $this );

		}

		/**
		 * Get Ref ID
		 * Returns a given users referral ID.
		 * @since 1.4
		 * @version 1.0
		 */
		public function get_ref_id( $user_id ) {

			// Link format
			switch ( $this->prefs['setup']['links'] ) {

				case 'username' :

					$user = get_userdata( $user_id );
					if ( $user === false ) $ref_id = 0;
					else $ref_id = urlencode( $user->user_login );

				break;

				case 'numeric' :

					$ref_id = mycred_get_user_meta( $user_id, 'mycred_affiliate_link', '', true );
					if ( empty( $ref_id ) ) {
						$counter = absint( get_option( 'mycred_affiliate_counter', 0 ) );
						$number = $counter+1;
						update_option( 'mycred_affiliate_counter', $number );
						mycred_update_user_meta( $user_id, 'mycred_affiliate_link', '', $number );
						$ref_id = $number;
					}

				break;

			}

			return apply_filters( 'mycred_affiliate_get_ref_id', $ref_id, $user_id, $this );

		}

		/**
		 * Get User ID from Ref ID
		 * @since 1.4
		 * @version 1.0
		 */
		public function get_user_id_from_ref_id( $string = '' ) {

			global $wpdb;

			$user_id = NULL;
			switch ( $this->prefs['setup']['links'] ) {

				case 'username' :

					$ref_id = trim( urldecode( $string ) );
					$user_id = $wpdb->get_var( $wpdb->prepare( "
						SELECT ID 
						FROM {$wpdb->users} 
						WHERE user_login = %s;", $ref_id ) );

				break;

				case 'numeric' :

					$ref_id = absint( $string );
					$user_id = $wpdb->get_var( $wpdb->prepare( "
						SELECT user_id 
						FROM {$wpdb->usermeta} 
						WHERE meta_key = %s 
							AND meta_value = %d;", 'mycred_affiliate_link', $ref_id ) );

				break;

			}

			return apply_filters( 'mycred_affiliate_get_user_id', $user_id, $string, $this );

		}

		/**
		 * Ref Counts
		 * Checks to see if this referral counts.
		 * @since 1.4
		 * @version 1.1.1
		 */
		public function ref_counts( $user_id, $IP = '', $instance = 'visit' ) {

			global $wpdb;

			// Prep
			$reply = true;

			if ( $instance == 'signup' )
				$ref = 'signup_referral';
			else
				$ref = 'visitor_referral';

			// We start by enforcing the global IP rule
			if ( $this->prefs['setup']['IP'] > 0 ) {

				// Count the occurence of this IP
				$count = $wpdb->get_var( $wpdb->prepare( "
					SELECT COUNT(*) 
					FROM {$this->core->log_table} 
					WHERE ref = %s 
					AND data = %s
					AND ctype = %s;", $ref, $IP, $this->mycred_type ) );

				if ( $count === false || $count >= $this->prefs['setup']['IP'] )
					$reply = false;

			}

			// If reply is still true we check limit
			if ( $reply !== false && $this->over_hook_limit( $instance, $ref, $user_id ) )
				$reply = false;

			return apply_filters( 'mycred_affiliate_ref_counts', $reply, $this );

		}

		/**
		 * Preference for Affiliate Hook
		 * @since 1.4
		 * @version 1.0.3
		 */
		public function preferences() {

			$prefs = $this->prefs;

?>
<label class="subheader"><?php _e( 'Referring Visitors', 'mycred' ); ?></label>
<ol>
	<li>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'visit' => 'creds' ) ); ?>" id="<?php echo $this->field_id( array( 'visit' => 'creds' ) ); ?>" value="<?php echo $this->core->number( $prefs['visit']['creds'] ); ?>" size="8" /></div>
	</li>
</ol>
<label class="subheader"><?php _e( 'Log template', 'mycred' ); ?></label>
<ol>
	<li>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'visit' => 'log' ) ); ?>" id="<?php echo $this->field_id( array( 'visit' => 'log' ) ); ?>" value="<?php echo esc_attr( $prefs['visit']['log'] ); ?>" class="long" /></div>
		<span class="description"><?php echo $this->available_template_tags( array( 'general' ) ); ?></span>
	</li>
	<li class="empty">&nbsp;</li>
	<li>
		<label for="<?php echo $this->field_id( array( 'visit' => 'limit' ) ); ?>"><?php _e( 'Limit', 'mycred' ); ?></label>
		<?php echo $this->hook_limit_setting( $this->field_name( array( 'visit' => 'limit' ) ), $this->field_id( array( 'visit' => 'limit' ) ), $prefs['visit']['limit'] ); ?>
	</li>
</ol>
<?php if ( get_option( 'users_can_register' ) ) : ?>
<label class="subheader"><?php _e( 'Referring Signups', 'mycred' ); ?></label>
<ol>
	<li>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'signup' => 'creds' ) ); ?>" id="<?php echo $this->field_id( array( 'signup' => 'creds' ) ); ?>" value="<?php echo $this->core->number( $prefs['signup']['creds'] ); ?>" size="8" /></div><br />
		<span class="description"><?php echo $this->core->template_tags_general( __( 'Visitors who have Cookies disabled will not award %_plural%.', 'mycred' ) ); ?></span>
	</li>
</ol>
<label class="subheader"><?php _e( 'Log template', 'mycred' ); ?></label>
<ol>
	<li>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'signup' => 'log' ) ); ?>" id="<?php echo $this->field_id( array( 'signup' => 'log' ) ); ?>" value="<?php echo esc_attr( $prefs['signup']['log'] ); ?>" class="long" /></div>
		<span class="description"><?php echo $this->available_template_tags( array( 'general', 'user' ) ); ?></span>
	</li>
	<li class="empty">&nbsp;</li>
	<li>
		<label for="<?php echo $this->field_id( array( 'signup' => 'limit' ) ); ?>"><?php _e( 'Limit', 'mycred' ); ?></label>
		<?php echo $this->hook_limit_setting( $this->field_name( array( 'signup' => 'limit' ) ), $this->field_id( array( 'signup' => 'limit' ) ), $prefs['signup']['limit'] ); ?>
	</li>
</ol>
<?php else : ?>
<label class="subheader"><?php _e( 'Referring Signups', 'mycred' ); ?></label>
<ol>
	<li><?php _e( 'Registrations are disabled.', 'mycred' ); ?>
		<input type="hidden" name="<?php echo $this->field_name( array( 'signup' => 'creds' ) ); ?>" id="<?php echo $this->field_id( array( 'signup' => 'creds' ) ); ?>" value="<?php echo $this->core->number( $prefs['signup']['creds'] ); ?>" />
		<input type="hidden" name="<?php echo $this->field_name( array( 'signup' => 'log' ) ); ?>" id="<?php echo $this->field_id( array( 'signup' => 'log' ) ); ?>" value="<?php echo esc_attr( $prefs['signup']['log'] ); ?>" />
		<input type="hidden" name="<?php echo $this->field_name( array( 'signup' => 'limit' ) ); ?>" id="<?php echo $this->field_id( array( 'signup' => 'limit' ) ); ?>" value="<?php echo $prefs['signup']['limit']; ?>" />
		<input type="hidden" name="<?php echo $this->field_name( array( 'signup' => 'limit_by' ) ); ?>" id="<?php echo $this->field_id( array( 'signup' => 'limit_by' ) ); ?>" value="<?php echo $prefs['signup']['limit_by']; ?>" />
	</li>
</ol>
<?php endif; ?>
<label class="subheader"><?php _e( 'Referral Links', 'mycred' ); ?></label>
<ol>
	<li>
		<input type="radio" name="<?php echo $this->field_name( array( 'setup' => 'links' ) ); ?>" id="<?php echo $this->field_id( array( 'setup' => 'links' ) ); ?>-numeric" <?php checked( $prefs['setup']['links'], 'numeric' ); ?> value="numeric" /> 
		<label for="<?php echo $this->field_id( array( 'setup' => 'links' ) ); ?>-numeric"><?php _e( 'Assign numeric referral IDs to each user.', 'mycred' ); ?></label><br />
		<span class="description"><?php printf( '%s: %s', __( 'Example', 'mycred' ), esc_url( add_query_arg( array( $this->ref_key => 1 ), home_url( '/' ) ) ) ); ?></span>
	</li>
	<li class="empty">&nbsp;</li>
	<li>
		<input type="radio" name="<?php echo $this->field_name( array( 'setup' => 'links' ) ); ?>" id="<?php echo $this->field_id( array( 'setup' => 'links' ) ); ?>-username" <?php checked( $prefs['setup']['links'], 'username' ); ?> value="username" /> 
		<label for="<?php echo $this->field_id( array( 'setup' => 'links' ) ); ?>-username"><?php _e( 'Assign usernames as IDs for each user.', 'mycred' ); ?></label><br />
		<span class="description"><?php printf( '%s: %s', __( 'Example', 'mycred' ), esc_url( add_query_arg( array( $this->ref_key => 'john+doe' ), home_url( '/' ) ) ) ); ?></span>
	</li>
</ol>
<label class="subheader"><?php _e( 'IP Limit', 'mycred' ); ?></label>
<ol>
	<li>
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'setup' => 'IP' ) ); ?>" id="<?php echo $this->field_id( array( 'setup' => 'IP' ) ); ?>" value="<?php echo $prefs['setup']['IP']; ?>" size="8" /></div>
		<span class="description"><?php echo $this->core->template_tags_general( __( 'The number of times each IP address grants %_plural%. Use zero for unlimited.', 'mycred' ) ); ?></span>
	</li>
</ol>
<?php if ( function_exists( 'bp_is_active' ) && bp_is_active( 'xprofile' ) ) : ?>
<label class="subheader"><?php _e( 'BuddyPress Profile', 'mycred' ); ?></label>
<ol>
	<li>
		<input type="checkbox" name="<?php echo $this->field_name( array( 'buddypress' => 'profile' ) ); ?>" id="<?php echo $this->field_id( array( 'buddypress' => 'profile' ) ); ?>"<?php checked( $prefs['buddypress']['profile'], 1 ); ?> value="1" /><label for="<?php echo $this->field_id( array( 'buddypress' => 'profile' ) ); ?>"><?php _e( 'Insert Link in users Profile', 'mycred' ); ?></label><br />
		<span class="description"><?php echo $this->core->template_tags_general( __( 'Option to inser the referral link in users profiles. Links will only be visible to users viewing their own profiles or administrators.', 'mycred' ) ); ?></span>
	</li>
	<li class="empty">&nbsp;</li>
	<li>
		<label><?php _e( 'Title', 'mycred' ); ?></label><br />
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'buddypress' => 'title' ) ); ?>" id="<?php echo $this->field_id( array( 'buddypress' => 'title' ) ); ?>" value="<?php echo $prefs['buddypress']['title']; ?>" class="long" /></div>
		<span class="description"><?php _e( 'Leave empty to hide.', 'mycred' ); ?></span>
	</li>
	<li>
		<label><?php _e( 'Description', 'mycred' ); ?></label><br />
		<span class="description"><?php _e( 'Optional description to insert under the link.', 'mycred' ); ?></span><br /><br />
<?php

			// Description editor
			$id = str_replace( '-', '', $this->field_id( array( 'buddypress' => 'desc' ) ) );
			wp_editor( $prefs['buddypress']['desc'], $id, array(
				'textarea_name' => $this->field_name( array( 'buddypress' => 'desc' ) ),
				'textarea_rows' => 10
			) );

?>
	</li>
	<li class="empty">&nbsp;</li>
	<li>
		<label><?php _e( 'Profile Positioning', 'mycred' ); ?></label><br />
		<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'buddypress' => 'priority' ) ); ?>" id="<?php echo $this->field_id( array( 'buddypress' => 'priority' ) ); ?>" value="<?php echo $prefs['buddypress']['priority']; ?>" size="8" /></div><br />
		<span class="description"><?php _e( 'You can move around the referral link on your users profile by changing the position. Increase to move up, decrease to move down.', 'mycred' ); ?></span><br />
		<span class="description"><?php printf( '<strong>%s</strong> %s', __( 'Note!', 'mycred' ), __( 'You can not move the referral link above the users "Base" profile details!', 'mycred' ) ); ?></span><br />
	</li>
</ol>
<?php else : ?>
<label class="subheader"><?php _e( 'BuddyPress Profile', 'mycred' ); ?></label>
<ol>
	<li><?php _e( 'Requires BuddyPress Extended Profiles to be enabled.', 'mycred' ); ?>
		<input type="hidden" name="<?php echo $this->field_name( array( 'buddypress' => 'profile' ) ); ?>" id="<?php echo $this->field_id( array( 'buddypress' => 'profile' ) ); ?>" value="0" />
		<input type="hidden" name="<?php echo $this->field_name( array( 'buddypress' => 'title' ) ); ?>" id="<?php echo $this->field_id( array( 'buddypress' => 'title' ) ); ?>" value="<?php echo $prefs['buddypress']['title']; ?>" />
		<input type="hidden" name="<?php echo $this->field_name( array( 'buddypress' => 'desc' ) ); ?>" id="<?php echo $this->field_id( array( 'buddypress' => 'desc' ) ); ?>" value="" />
		<input type="hidden" name="<?php echo $this->field_name( array( 'buddypress' => 'priority' ) ); ?>" id="<?php echo $this->field_id( array( 'buddypress' => 'priority' ) ); ?>" value="15" />
	</li>
</ol>
<?php endif; ?>
<label class="subheader"><?php _e( 'Available Shortcodes', 'mycred' ); ?></label>
<ol>
	<li><a href="http://codex.mycred.me/shortcodes/mycred_affiliate_link/" target="_blank">[mycred_affiliate_link]</a> and <a href="http://codex.mycred.me/shortcodes/mycred_affiliate_id/" target="_blank">[mycred_affiliate_id]</a>.</li>
</ol>
<?php

			do_action( 'mycred_affiliate_prefs', $prefs, $this );

		}

		/**
		 * Sanitise Preference
		 * @since 1.4
		 * @version 1.1
		 */
		function sanitise_preferences( $data ) {

			$data['buddypress']['profile'] = ( isset( $data['buddypress']['profile'] ) ) ? $data['buddypress']['profile'] : 0;

			if ( isset( $data['visit']['limit'] ) && isset( $data['visit']['limit_by'] ) ) {
				$limit = sanitize_text_field( $data['visit']['limit'] );
				if ( $limit == '' ) $limit = 0;
				$data['visit']['limit'] = $limit . '/' . $data['visit']['limit_by'];
				unset( $data['visit']['limit_by'] );
			}

			if ( isset( $data['signup']['limit'] ) && isset( $data['signup']['limit_by'] ) ) {
				$limit = sanitize_text_field( $data['signup']['limit'] );
				if ( $limit == '' ) $limit = 0;
				$data['signup']['limit'] = $limit . '/' . $data['signup']['limit_by'];
				unset( $data['signup']['limit_by'] );
			}

			return apply_filters( 'mycred_affiliate_save_pref', $data );

		}
	}
endif;

?>